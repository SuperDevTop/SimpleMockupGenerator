; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\lucas\Documents\Quazip\zlib1211\zlib-1.2.11\compress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CJNJFBNP@1?42?411?$AA@			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJNJFBNP@1?42?411?$AA@
CONST	SEGMENT
??_C@_06CJNJFBNP@1?42?411?$AA@ DB '1.2.11', 00H		; `string'
CONST	ENDS
PUBLIC	_compressBound@4
PUBLIC	_compress@16
PUBLIC	_compress2@20
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\compress.c
;	COMDAT _compress2@20
_TEXT	SEGMENT
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2@20 PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 29   :     z_stream stream;
; 30   :     int err;
; 31   :     const uInt max = (uInt)-1;
; 32   :     uLong left;
; 33   : 
; 34   :     left = *destLen;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _destLen$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 38		 mov	 edi, DWORD PTR [eax]

; 35   :     *destLen = 0;
; 36   : 
; 37   :     stream.zalloc = (alloc_func)0;
; 38   :     stream.zfree = (free_func)0;
; 39   :     stream.opaque = (voidpf)0;
; 40   : 
; 41   :     err = deflateInit(&stream, level);

  00011	6a 38		 push	 56			; 00000038H
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  00018	ff 75 18	 push	 DWORD PTR _level$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00021	8d 44 24 1c	 lea	 eax, DWORD PTR _stream$[esp+84]
  00025	50		 push	 eax
  00026	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+120], 0
  0002e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+124], 0
  00036	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+128], 0
  0003e	e8 00 00 00 00	 call	 _deflateInit_@16

; 42   :     if (err != Z_OK) return err;

  00043	85 c0		 test	 eax, eax
  00045	0f 85 87 00 00
	00		 jne	 $LN1@compress2

; 43   : 
; 44   :     stream.next_out = dest;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]

; 45   :     stream.avail_out = 0;

  0004e	33 c9		 xor	 ecx, ecx

; 46   :     stream.next_in = (z_const Bytef *)source;
; 47   :     stream.avail_in = 0;

  00050	8b 75 14	 mov	 esi, DWORD PTR _sourceLen$[ebp]
  00053	33 d2		 xor	 edx, edx
  00055	89 44 24 1c	 mov	 DWORD PTR _stream$[esp+84], eax
  00059	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0005c	89 4c 24 20	 mov	 DWORD PTR _stream$[esp+88], ecx
  00060	89 44 24 10	 mov	 DWORD PTR _stream$[esp+72], eax
  00064	89 54 24 14	 mov	 DWORD PTR _stream$[esp+76], edx
$LN16@compress2:
  00068	83 cb ff	 or	 ebx, -1

; 48   : 
; 49   :     do {
; 50   :         if (stream.avail_out == 0) {

  0006b	85 c9		 test	 ecx, ecx
  0006d	75 0d		 jne	 SHORT $LN6@compress2

; 51   :             stream.avail_out = left > (uLong)max ? max : (uInt)left;

  0006f	3b fb		 cmp	 edi, ebx
  00071	8b c7		 mov	 eax, edi
  00073	0f 47 c3	 cmova	 eax, ebx
  00076	89 44 24 20	 mov	 DWORD PTR _stream$[esp+88], eax

; 52   :             left -= stream.avail_out;

  0007a	2b f8		 sub	 edi, eax
$LN6@compress2:

; 53   :         }
; 54   :         if (stream.avail_in == 0) {

  0007c	85 d2		 test	 edx, edx
  0007e	75 0e		 jne	 SHORT $LN7@compress2

; 55   :             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;

  00080	83 fe ff	 cmp	 esi, -1
  00083	8b c6		 mov	 eax, esi
  00085	0f 47 c3	 cmova	 eax, ebx
  00088	89 44 24 14	 mov	 DWORD PTR _stream$[esp+76], eax

; 56   :             sourceLen -= stream.avail_in;

  0008c	2b f0		 sub	 esi, eax
$LN7@compress2:

; 57   :         }
; 58   :         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);

  0008e	33 c9		 xor	 ecx, ecx
  00090	b8 04 00 00 00	 mov	 eax, 4
  00095	85 f6		 test	 esi, esi
  00097	0f 45 c1	 cmovne	 eax, ecx
  0009a	50		 push	 eax
  0009b	8d 44 24 14	 lea	 eax, DWORD PTR _stream$[esp+76]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _deflate@8
  000a5	8b d8		 mov	 ebx, eax

; 59   :     } while (err == Z_OK);

  000a7	85 db		 test	 ebx, ebx
  000a9	75 0a		 jne	 SHORT $LN15@compress2

; 46   :     stream.next_in = (z_const Bytef *)source;
; 47   :     stream.avail_in = 0;

  000ab	8b 4c 24 20	 mov	 ecx, DWORD PTR _stream$[esp+88]
  000af	8b 54 24 14	 mov	 edx, DWORD PTR _stream$[esp+76]
  000b3	eb b3		 jmp	 SHORT $LN16@compress2
$LN15@compress2:

; 60   : 
; 61   :     *destLen = stream.total_out;

  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _destLen$[ebp]
  000b8	8b 44 24 24	 mov	 eax, DWORD PTR _stream$[esp+92]
  000bc	89 01		 mov	 DWORD PTR [ecx], eax

; 62   :     deflateEnd(&stream);

  000be	8d 44 24 10	 lea	 eax, DWORD PTR _stream$[esp+72]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _deflateEnd@4

; 63   :     return err == Z_STREAM_END ? Z_OK : err;

  000c8	33 c0		 xor	 eax, eax
  000ca	83 fb 01	 cmp	 ebx, 1
  000cd	0f 44 d8	 cmove	 ebx, eax
  000d0	8b c3		 mov	 eax, ebx
$LN1@compress2:

; 64   : }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 14 00	 ret	 20			; 00000014H
_compress2@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\compress.c
;	COMDAT _compress@16
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress@16 PROC					; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00003	6a ff		 push	 -1
  00005	ff 75 14	 push	 DWORD PTR _sourceLen$[ebp]
  00008	ff 75 10	 push	 DWORD PTR _source$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _destLen$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _dest$[ebp]
  00011	e8 00 00 00 00	 call	 _compress2@20

; 75   : }

  00016	5d		 pop	 ebp
  00017	c2 10 00	 ret	 16			; 00000010H
_compress@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\compress.c
;	COMDAT _compressBound@4
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound@4 PROC					; COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  00003	8b 55 08	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0000b	8b ca		 mov	 ecx, edx
  0000d	03 c2		 add	 eax, edx
  0000f	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00012	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00015	03 c1		 add	 eax, ecx
  00017	83 c2 0d	 add	 edx, 13			; 0000000dH
  0001a	03 c2		 add	 eax, edx

; 85   :            (sourceLen >> 25) + 13;
; 86   : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
_compressBound@4 ENDP
_TEXT	ENDS
END
