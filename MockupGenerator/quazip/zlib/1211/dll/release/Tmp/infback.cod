; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\lucas\Documents\Quazip\zlib1211\zlib-1.2.11\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
EXTRN	_inflate_fast:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ DB 'invalid '
	DB	'code -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 84 c0 00 00
	00		 je	 $LN3@inflateBac
  0000e	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00011	0f 85 b7 00 00
	00		 jne	 $LN3@inflateBac
  00017	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001b	0f 85 ad 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 93 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 88 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	77 7d		 ja	 SHORT $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00045	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00050	75 0e		 jne	 SHORT $LN6@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;

  00052	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc

; 49   :         strm->opaque = (voidpf)0;

  00059	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  00060	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00064	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00066	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0006d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00070	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  00075	6a 01		 push	 1
  00077	ff 76 28	 push	 DWORD PTR [esi+40]
  0007a	ff d0		 call	 eax
  0007c	8b d0		 mov	 edx, eax
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00081	85 d2		 test	 edx, edx
  00083	75 0a		 jne	 SHORT $LN8@inflateBac
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0008a	5b		 pop	 ebx

; 70   : }

  0008b	5d		 pop	 ebp
  0008c	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  0008f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  00092	8b cf		 mov	 ecx, edi
  00094	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	5f		 pop	 edi
  0009d	d3 e0		 shl	 eax, cl
  0009f	5e		 pop	 esi
  000a0	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 66   :     state->window = window;
; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000a3	33 c0		 xor	 eax, eax
  000a5	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000a8	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000af	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000b6	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000bd	5b		 pop	 ebx

; 70   : }

  000be	5d		 pop	 ebp
  000bf	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi

; 42   :         return Z_STREAM_ERROR;

  000c4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c9	5b		 pop	 ebx

; 70   : }

  000ca	5d		 pop	 ebp
  000cb	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000ce	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 70   : }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv1719 = -48						; size = 4
tv1718 = -48						; size = 4
tv1717 = -48						; size = 4
$T1 = -44						; size = 4
tv1711 = -44						; size = 4
tv1709 = -44						; size = 4
tv1708 = -44						; size = 4
tv1722 = -40						; size = 4
_len$1$ = -36						; size = 4
_here$1$ = -36						; size = 4
_copy$4$ = -32						; size = 4
_last$ = -32						; size = 4
_here$ = -32						; size = 4
_put$1$ = -28						; size = 4
_left$1$ = -24						; size = 4
_bits$1$ = -20						; size = 4
_next$5$ = -16						; size = 4
_state$1$ = -12						; size = 4
_next$ = -8						; size = 4
_hold$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 b9 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 ab 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	53		 push	 ebx
  00020	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 279  :     state->mode = TYPE;

  00027	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 281  :     state->whave = 0;

  00035	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003e	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00041	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00044	56		 push	 esi
  00045	57		 push	 edi

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00046	85 db		 test	 ebx, ebx
  00048	74 05		 je	 SHORT $LN343@inflateBac
  0004a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0004d	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004f	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  00051	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00054	33 c9		 xor	 ecx, ecx
  00056	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  00059	33 ff		 xor	 edi, edi

; 287  :     left = state->wsize;

  0005b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005e	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00069	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0006c	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0006f	83 f8 12	 cmp	 eax, 18			; 00000012H
  00072	0f 87 bb 0c 00
	00		 ja	 $LN341@inflateBac
  00078	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
  0007b	0f 1f 44 00 00	 npad	 5
$LL2@inflateBac:
  00080	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN471@inflateBac[eax]
  00087	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN505@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  0008e	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00092	74 19		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  00094	8b cf		 mov	 ecx, edi

; 296  :                 state->mode = DONE;

  00096	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  0009d	83 e1 07	 and	 ecx, 7
  000a0	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  000a3	2b f9		 sub	 edi, ecx
  000a5	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 297  :                 break;

  000a8	e9 6c 0c 00 00	 jmp	 $LN503@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000ad	83 ff 03	 cmp	 edi, 3
  000b0	73 3d		 jae	 SHORT $LN10@inflateBac
$LL13@inflateBac:
  000b2	85 f6		 test	 esi, esi
  000b4	75 1a		 jne	 SHORT $LN18@inflateBac
  000b6	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  000b9	50		 push	 eax
  000ba	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  000bd	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000c0	8b f0		 mov	 esi, eax
  000c2	83 c4 08	 add	 esp, 8
  000c5	85 f6		 test	 esi, esi
  000c7	0f 84 81 0c 00
	00		 je	 $LN369@inflateBac
  000cd	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN18@inflateBac:
  000d0	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  000d3	8b cf		 mov	 ecx, edi
  000d5	d3 e0		 shl	 eax, cl
  000d7	43		 inc	 ebx
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  000db	83 c7 08	 add	 edi, 8
  000de	03 c8		 add	 ecx, eax
  000e0	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  000e3	4e		 dec	 esi
  000e4	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000e7	83 ff 03	 cmp	 edi, 3
  000ea	72 c6		 jb	 SHORT $LL13@inflateBac
  000ec	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000ef	8b c1		 mov	 eax, ecx

; 301  :             DROPBITS(1);

  000f1	d1 e9		 shr	 ecx, 1
  000f3	83 e0 01	 and	 eax, 1
  000f6	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 302  :             switch (BITS(2)) {

  000fc	8b c1		 mov	 eax, ecx
  000fe	83 e0 03	 and	 eax, 3
  00101	83 f8 03	 cmp	 eax, 3
  00104	77 3d		 ja	 SHORT $LN28@inflateBac
  00106	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN506@inflateBac[eax*4]
$LN259@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;

  0010d	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H

; 307  :                 break;

  00114	eb 2d		 jmp	 SHORT $LN28@inflateBac
$LN260@inflateBac:

; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00116	8b ca		 mov	 ecx, edx
  00118	e8 00 00 00 00	 call	 _fixedtables

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  00120	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  00127	eb 1a		 jmp	 SHORT $LN28@inflateBac
$LN261@inflateBac:

; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;

  00129	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H

; 318  :                 break;

  00130	eb 11		 jmp	 SHORT $LN28@inflateBac
$LN262@inflateBac:

; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  00132	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00135	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 321  :                 state->mode = BAD;

  0013c	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);
; 324  :             break;

  00143	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00146	c1 e9 02	 shr	 ecx, 2
  00149	83 ef 03	 sub	 edi, 3
  0014c	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  0014f	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00152	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00155	e9 c8 0b 00 00	 jmp	 $LN393@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  0015a	8b cf		 mov	 ecx, edi
  0015c	83 e1 07	 and	 ecx, 7
  0015f	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  00162	2b f9		 sub	 edi, ecx
  00164	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 329  :             NEEDBITS(32);

  00167	83 ff 20	 cmp	 edi, 32			; 00000020H
  0016a	73 46		 jae	 SHORT $LN491@inflateBac
  0016c	0f 1f 40 00	 npad	 4
$LL35@inflateBac:
  00170	85 f6		 test	 esi, esi
  00172	75 1a		 jne	 SHORT $LN40@inflateBac
  00174	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00177	50		 push	 eax
  00178	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0017b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0017e	8b f0		 mov	 esi, eax
  00180	83 c4 08	 add	 esp, 8
  00183	85 f6		 test	 esi, esi
  00185	0f 84 c3 0b 00
	00		 je	 $LN369@inflateBac
  0018b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN40@inflateBac:
  0018e	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00191	8b cf		 mov	 ecx, edi
  00193	d3 e0		 shl	 eax, cl
  00195	83 c7 08	 add	 edi, 8
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  0019b	43		 inc	 ebx
  0019c	03 c8		 add	 ecx, eax
  0019e	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  001a1	4e		 dec	 esi
  001a2	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  001a5	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  001a8	83 ff 20	 cmp	 edi, 32			; 00000020H
  001ab	72 c3		 jb	 SHORT $LL35@inflateBac
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  001b0	eb 03		 jmp	 SHORT $LN32@inflateBac
$LN491@inflateBac:
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001b5	8b c1		 mov	 eax, ecx
  001b7	0f b7 d9	 movzx	 ebx, cx
  001ba	f7 d0		 not	 eax
  001bc	c1 e8 10	 shr	 eax, 16			; 00000010H
  001bf	3b d8		 cmp	 ebx, eax
  001c1	74 1c		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001c3	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001c6	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 332  :                 state->mode = BAD;

  001cd	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 333  :                 break;

  001d4	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  001d7	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  001da	e9 43 0b 00 00	 jmp	 $LN393@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001df	33 c9		 xor	 ecx, ecx
  001e1	89 5a 44	 mov	 DWORD PTR [edx+68], ebx
  001e4	33 ff		 xor	 edi, edi
  001e6	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  001e9	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001ec	3b d9		 cmp	 ebx, ecx
  001ee	0f 84 85 00 00
	00		 je	 $LN47@inflateBac
  001f4	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LL46@inflateBac:

; 342  :                 copy = state->length;

  001f7	8b 5a 44	 mov	 ebx, DWORD PTR [edx+68]

; 343  :                 PULL();

  001fa	85 f6		 test	 esi, esi
  001fc	75 1d		 jne	 SHORT $LN48@inflateBac
  001fe	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00201	50		 push	 eax
  00202	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00205	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00208	8b f0		 mov	 esi, eax
  0020a	83 c4 08	 add	 esp, 8
  0020d	85 f6		 test	 esi, esi
  0020f	0f 84 39 0b 00
	00		 je	 $LN369@inflateBac
  00215	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00218	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  0021b	85 c0		 test	 eax, eax
  0021d	75 25		 jne	 SHORT $LN51@inflateBac
  0021f	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00222	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00225	51		 push	 ecx
  00226	50		 push	 eax
  00227	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  0022a	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  0022d	89 4d e8	 mov	 DWORD PTR _left$1$[ebp], ecx
  00230	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00233	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH
  00239	85 c0		 test	 eax, eax
  0023b	0f 85 27 0b 00
	00		 jne	 $LN372@inflateBac
  00241	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;

  00244	3b de		 cmp	 ebx, esi
  00246	0f 47 de	 cmova	 ebx, esi

; 346  :                 if (copy > left) copy = left;

  00249	3b d8		 cmp	 ebx, eax
  0024b	0f 47 d8	 cmova	 ebx, eax

; 347  :                 zmemcpy(put, next, copy);

  0024e	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  00251	53		 push	 ebx
  00252	ff 75 f8	 push	 DWORD PTR _next$[ebp]
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  0025b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0025e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00261	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  00264	2b f3		 sub	 esi, ebx
  00266	01 5d f8	 add	 DWORD PTR _next$[ebp], ebx
  00269	2b c3		 sub	 eax, ebx
  0026b	01 5d e4	 add	 DWORD PTR _put$1$[ebp], ebx
  0026e	29 5a 44	 sub	 DWORD PTR [edx+68], ebx
  00271	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  00274	75 81		 jne	 SHORT $LL46@inflateBac
  00276	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  00279	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 356  :             break;

  00280	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00283	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00286	e9 97 0a 00 00	 jmp	 $LN393@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  0028b	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  0028e	73 38		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  00290	85 f6		 test	 esi, esi
  00292	75 1a		 jne	 SHORT $LN62@inflateBac
  00294	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00297	50		 push	 eax
  00298	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0029b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0029e	8b f0		 mov	 esi, eax
  002a0	83 c4 08	 add	 esp, 8
  002a3	85 f6		 test	 esi, esi
  002a5	0f 84 a3 0a 00
	00		 je	 $LN369@inflateBac
  002ab	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN62@inflateBac:
  002ae	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  002b1	8b cf		 mov	 ecx, edi
  002b3	d3 e0		 shl	 eax, cl
  002b5	43		 inc	 ebx
  002b6	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  002b9	83 c7 08	 add	 edi, 8
  002bc	4e		 dec	 esi
  002bd	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  002c0	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  002c3	72 cb		 jb	 SHORT $LL57@inflateBac
  002c5	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002c8	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002cb	83 ef 0e	 sub	 edi, 14			; 0000000eH
  002ce	8b c3		 mov	 eax, ebx
  002d0	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  002d3	83 e0 1f	 and	 eax, 31			; 0000001fH
  002d6	c1 eb 05	 shr	 ebx, 5
  002d9	05 01 01 00 00	 add	 eax, 257		; 00000101H
  002de	89 42 64	 mov	 DWORD PTR [edx+100], eax
  002e1	8b c3		 mov	 eax, ebx
  002e3	83 e0 1f	 and	 eax, 31			; 0000001fH
  002e6	c1 eb 05	 shr	 ebx, 5
  002e9	40		 inc	 eax
  002ea	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002ed	8b c3		 mov	 eax, ebx
  002ef	83 e0 0f	 and	 eax, 15			; 0000000fH
  002f2	c1 eb 04	 shr	 ebx, 4
  002f5	83 c0 04	 add	 eax, 4
  002f8	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  002fb	81 7a 64 1e 01
	00 00		 cmp	 DWORD PTR [edx+100], 286 ; 0000011eH
  00302	89 42 60	 mov	 DWORD PTR [edx+96], eax
  00305	0f 87 14 05 00
	00		 ja	 $LN277@inflateBac
  0030b	83 7a 68 1e	 cmp	 DWORD PTR [edx+104], 30	; 0000001eH
  0030f	0f 87 0a 05 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00315	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 378  :             while (state->have < state->ncode) {

  0031c	85 c0		 test	 eax, eax
  0031e	76 6b		 jbe	 SHORT $LN352@inflateBac
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00320	83 ff 03	 cmp	 edi, 3
  00323	73 3a		 jae	 SHORT $LN76@inflateBac
  00325	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LL79@inflateBac:
  00328	85 f6		 test	 esi, esi
  0032a	75 1a		 jne	 SHORT $LN84@inflateBac
  0032c	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0032f	50		 push	 eax
  00330	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00333	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00336	8b f0		 mov	 esi, eax
  00338	83 c4 08	 add	 esp, 8
  0033b	85 f6		 test	 esi, esi
  0033d	0f 84 0b 0a 00
	00		 je	 $LN369@inflateBac
  00343	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  00346	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00349	8b cf		 mov	 ecx, edi
  0034b	d3 e0		 shl	 eax, cl
  0034d	42		 inc	 edx
  0034e	83 c7 08	 add	 edi, 8
  00351	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00354	4e		 dec	 esi
  00355	03 d8		 add	 ebx, eax
  00357	83 ff 03	 cmp	 edi, 3
  0035a	72 cc		 jb	 SHORT $LL79@inflateBac
  0035c	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  0035f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00362	8b cb		 mov	 ecx, ebx
  00364	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  00367	c1 eb 03	 shr	 ebx, 3
  0036a	83 ef 03	 sub	 edi, 3
  0036d	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00370	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00373	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  0037b	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  00380	ff 42 6c	 inc	 DWORD PTR [edx+108]
  00383	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00386	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  00389	72 95		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  0038b	83 7a 6c 13	 cmp	 DWORD PTR [edx+108], 19	; 00000013H
  0038f	73 1b		 jae	 SHORT $LN91@inflateBac
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  00391	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00394	33 c9		 xor	 ecx, ecx
  00396	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  0039e	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  003a3	ff 42 6c	 inc	 DWORD PTR [edx+108]
  003a6	83 7a 6c 13	 cmp	 DWORD PTR [edx+108], 19	; 00000013H
  003aa	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003ac	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003b2	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003b9	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  003bc	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003bf	8d 9a f4 02 00
	00		 lea	 ebx, DWORD PTR [edx+756]
  003c5	89 01		 mov	 DWORD PTR [ecx], eax
  003c7	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003ca	83 c2 74	 add	 edx, 116		; 00000074H
  003cd	53		 push	 ebx
  003ce	50		 push	 eax
  003cf	51		 push	 ecx
  003d0	6a 13		 push	 19			; 00000013H
  003d2	33 c9		 xor	 ecx, ecx
  003d4	89 45 d8	 mov	 DWORD PTR tv1722[ebp], eax
  003d7	89 55 d0	 mov	 DWORD PTR tv1719[ebp], edx
  003da	e8 00 00 00 00	 call	 _inflate_table

; 392  :                 state->mode = BAD;

  003df	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  003e2	83 c4 10	 add	 esp, 16			; 00000010H
  003e5	85 c0		 test	 eax, eax
  003e7	74 16		 je	 SHORT $LN280@inflateBac

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {
; 391  :                 strm->msg = (char *)"invalid code lengths set";

  003e9	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  003ec	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 392  :                 state->mode = BAD;

  003f3	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 393  :                 break;

  003fa	e9 1a 09 00 00	 jmp	 $LN503@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  003ff	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00402	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00409	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0040c	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0040f	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00412	0f 84 8d 02 00
	00		 je	 $LN93@inflateBac
  00418	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00420	8b 45 d8	 mov	 eax, DWORD PTR tv1722[ebp]
  00423	ba 01 00 00 00	 mov	 edx, 1
  00428	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0042d	d3 e2		 shl	 edx, cl
  0042f	4a		 dec	 edx
  00430	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00433	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00436	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00439	8b c8		 mov	 ecx, eax
  0043b	c1 e9 08	 shr	 ecx, 8
  0043e	0f b6 c9	 movzx	 ecx, cl
  00441	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  00444	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  00447	3b cf		 cmp	 ecx, edi
  00449	76 63		 jbe	 SHORT $LN375@inflateBac
  0044b	0f 1f 44 00 00	 npad	 5
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00450	85 f6		 test	 esi, esi
  00452	75 1a		 jne	 SHORT $LN100@inflateBac
  00454	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00457	50		 push	 eax
  00458	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0045b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0045e	8b f0		 mov	 esi, eax
  00460	83 c4 08	 add	 esp, 8
  00463	85 f6		 test	 esi, esi
  00465	0f 84 e3 08 00
	00		 je	 $LN369@inflateBac
  0046b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  0046e	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00471	8b cf		 mov	 ecx, edi
  00473	d3 e0		 shl	 eax, cl
  00475	43		 inc	 ebx
  00476	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00479	ba 01 00 00 00	 mov	 edx, 1
  0047e	8b 45 d8	 mov	 eax, DWORD PTR tv1722[ebp]
  00481	83 c7 08	 add	 edi, 8
  00484	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00487	4e		 dec	 esi
  00488	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0048b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048d	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00490	d3 e2		 shl	 edx, cl
  00492	4a		 dec	 edx
  00493	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00496	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00499	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0049c	8b c8		 mov	 ecx, eax
  0049e	c1 e9 08	 shr	 ecx, 8
  004a1	0f b6 c9	 movzx	 ecx, cl
  004a4	89 45 dc	 mov	 DWORD PTR _here$1$[ebp], eax
  004a7	89 45 e0	 mov	 DWORD PTR _here$[ebp], eax
  004aa	3b cf		 cmp	 ecx, edi
  004ac	77 a2		 ja	 SHORT $LL94@inflateBac
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004ae	8b c8		 mov	 ecx, eax
  004b0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004b3	89 4d d4	 mov	 DWORD PTR tv1711[ebp], ecx
  004b6	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004ba	73 24		 jae	 SHORT $LN499@inflateBac

; 406  :                     DROPBITS(here.bits);
; 407  :                     state->lens[state->have++] = here.val;

  004bc	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  004bf	c1 e8 08	 shr	 eax, 8
  004c2	0f b6 c8	 movzx	 ecx, al
  004c5	d3 6d fc	 shr	 DWORD PTR _hold$1$[ebp], cl
  004c8	2b f9		 sub	 edi, ecx
  004ca	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  004cd	8b 4d d4	 mov	 ecx, DWORD PTR tv1711[ebp]
  004d0	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  004d3	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  004d8	ff 42 6c	 inc	 DWORD PTR [edx+108]

; 408  :                 }

  004db	e9 b0 01 00 00	 jmp	 $LN500@inflateBac
$LN499@inflateBac:
  004e0	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  004e3	0f 85 96 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  004e9	8b c8		 mov	 ecx, eax
  004eb	c1 e9 08	 shr	 ecx, 8
  004ee	0f b6 c9	 movzx	 ecx, cl
  004f1	83 c1 02	 add	 ecx, 2
  004f4	89 4d d4	 mov	 DWORD PTR $T1[ebp], ecx
  004f7	3b f9		 cmp	 edi, ecx
  004f9	73 45		 jae	 SHORT $LN106@inflateBac
  004fb	0f 1f 44 00 00	 npad	 5
$LL109@inflateBac:
  00500	85 f6		 test	 esi, esi
  00502	75 1d		 jne	 SHORT $LN114@inflateBac
  00504	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00507	50		 push	 eax
  00508	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0050b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0050e	8b f0		 mov	 esi, eax
  00510	83 c4 08	 add	 esp, 8
  00513	85 f6		 test	 esi, esi
  00515	0f 84 33 08 00
	00		 je	 $LN369@inflateBac
  0051b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0051e	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN114@inflateBac:
  00521	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00524	8b cf		 mov	 ecx, edi
  00526	d3 e0		 shl	 eax, cl
  00528	43		 inc	 ebx
  00529	03 d0		 add	 edx, eax
  0052b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0052e	83 c7 08	 add	 edi, 8
  00531	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00534	4e		 dec	 esi
  00535	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00538	3b 7d d4	 cmp	 edi, DWORD PTR $T1[ebp]
  0053b	72 c3		 jb	 SHORT $LL109@inflateBac
  0053d	8b 45 dc	 mov	 eax, DWORD PTR _here$1$[ebp]
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);

  00540	0f b6 cc	 movzx	 ecx, ah
  00543	d3 ea		 shr	 edx, cl
  00545	2b f9		 sub	 edi, ecx
  00547	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx

; 413  :                         if (state->have == 0) {

  0054a	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0054d	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00550	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00553	85 c0		 test	 eax, eax
  00555	0f 84 77 01 00
	00		 je	 $LN380@inflateBac

; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);

  0055b	0f b7 44 42 72	 movzx	 eax, WORD PTR [edx+eax*2+114]
  00560	89 45 dc	 mov	 DWORD PTR _len$1$[ebp], eax

; 419  :                         copy = 3 + BITS(2);

  00563	8b 45 fc	 mov	 eax, DWORD PTR _hold$1$[ebp]
  00566	8b c8		 mov	 ecx, eax
  00568	83 e1 03	 and	 ecx, 3

; 420  :                         DROPBITS(2);

  0056b	c1 e8 02	 shr	 eax, 2
  0056e	83 c1 03	 add	 ecx, 3
  00571	89 45 fc	 mov	 DWORD PTR _hold$1$[ebp], eax
  00574	89 4d e0	 mov	 DWORD PTR _copy$4$[ebp], ecx
  00577	83 ef 02	 sub	 edi, 2

; 421  :                     }

  0057a	e9 df 00 00 00	 jmp	 $LN501@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  0057f	66 83 7d e2 11	 cmp	 WORD PTR _here$[ebp+2], 17 ; 00000011H

; 423  :                         NEEDBITS(here.bits + 3);

  00584	0f b6 cc	 movzx	 ecx, ah
  00587	75 63		 jne	 SHORT $LN142@inflateBac
  00589	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0058c	89 4d d4	 mov	 DWORD PTR tv1709[ebp], ecx
  0058f	3b f8		 cmp	 edi, eax
  00591	73 42		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  00593	85 f6		 test	 esi, esi
  00595	75 1d		 jne	 SHORT $LN131@inflateBac
  00597	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0059a	50		 push	 eax
  0059b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0059e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005a1	8b f0		 mov	 esi, eax
  005a3	83 c4 08	 add	 esp, 8
  005a6	85 f6		 test	 esi, esi
  005a8	0f 84 a0 07 00
	00		 je	 $LN369@inflateBac
  005ae	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  005b1	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN131@inflateBac:
  005b4	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  005b7	8b cf		 mov	 ecx, edi
  005b9	d3 e0		 shl	 eax, cl
  005bb	43		 inc	 ebx
  005bc	8b 4d d4	 mov	 ecx, DWORD PTR tv1709[ebp]
  005bf	03 d0		 add	 edx, eax
  005c1	83 c7 08	 add	 edi, 8
  005c4	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  005c7	4e		 dec	 esi
  005c8	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  005cb	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  005ce	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  005d1	3b f8		 cmp	 edi, eax
  005d3	72 be		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005d5	d3 ea		 shr	 edx, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005d7	8b c2		 mov	 eax, edx
  005d9	83 e0 07	 and	 eax, 7
  005dc	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005df	c1 ea 03	 shr	 edx, 3
  005e2	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  005e5	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  005ea	eb 61		 jmp	 SHORT $LN502@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005ec	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  005ef	89 4d d4	 mov	 DWORD PTR tv1708[ebp], ecx
  005f2	3b f8		 cmp	 edi, eax
  005f4	73 42		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005f6	85 f6		 test	 esi, esi
  005f8	75 1d		 jne	 SHORT $LN148@inflateBac
  005fa	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  005fd	50		 push	 eax
  005fe	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00601	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00604	8b f0		 mov	 esi, eax
  00606	83 c4 08	 add	 esp, 8
  00609	85 f6		 test	 esi, esi
  0060b	0f 84 3d 07 00
	00		 je	 $LN369@inflateBac
  00611	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00614	8b 55 fc	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN148@inflateBac:
  00617	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0061a	8b cf		 mov	 ecx, edi
  0061c	d3 e0		 shl	 eax, cl
  0061e	43		 inc	 ebx
  0061f	8b 4d d4	 mov	 ecx, DWORD PTR tv1708[ebp]
  00622	03 d0		 add	 edx, eax
  00624	83 c7 08	 add	 edi, 8
  00627	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  0062a	4e		 dec	 esi
  0062b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0062e	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00631	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00634	3b f8		 cmp	 edi, eax
  00636	72 be		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00638	d3 ea		 shr	 edx, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  0063a	8b c2		 mov	 eax, edx
  0063c	83 e0 7f	 and	 eax, 127		; 0000007fH
  0063f	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  00642	c1 ea 07	 shr	 edx, 7
  00645	89 45 e0	 mov	 DWORD PTR _copy$4$[ebp], eax
  00648	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN502@inflateBac:
  0064d	2b c1		 sub	 eax, ecx
  0064f	89 55 fc	 mov	 DWORD PTR _hold$1$[ebp], edx
  00652	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00655	03 f8		 add	 edi, eax
  00657	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _len$1$[ebp], 0
$LN501@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  0065e	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00661	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00664	03 4d e0	 add	 ecx, DWORD PTR _copy$4$[ebp]
  00667	03 42 64	 add	 eax, DWORD PTR [edx+100]
  0066a	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0066d	3b c8		 cmp	 ecx, eax
  0066f	77 61		 ja	 SHORT $LN380@inflateBac

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  00671	8b 4d e0	 mov	 ecx, DWORD PTR _copy$4$[ebp]
  00674	85 c9		 test	 ecx, ecx
  00676	74 1e		 je	 SHORT $LN406@inflateBac
  00678	8b 5d dc	 mov	 ebx, DWORD PTR _len$1$[ebp]
  0067b	0f 1f 44 00 00	 npad	 5
$LL157@inflateBac:

; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00680	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00683	66 89 5c 42 74	 mov	 WORD PTR [edx+eax*2+116], bx
  00688	ff 42 6c	 inc	 DWORD PTR [edx+108]
  0068b	83 e9 01	 sub	 ecx, 1
  0068e	75 f0		 jne	 SHORT $LL157@inflateBac
$LN500@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)

  00690	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00693	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN406@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00696	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00699	03 42 64	 add	 eax, DWORD PTR [edx+100]
  0069c	39 42 6c	 cmp	 DWORD PTR [edx+108], eax
  0069f	0f 82 7b fd ff
	ff		 jb	 $LL92@inflateBac
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006a5	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006ac	0f 84 6d 06 00
	00		 je	 $LN490@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006b2	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006ba	75 2c		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006bc	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006bf	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 452  :                 state->mode = BAD;

  006c6	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 453  :                 break;

  006cd	e9 47 06 00 00	 jmp	 $LN503@inflateBac
$LN380@inflateBac:

; 414  :                             strm->msg = (char *)"invalid bit length repeat";

  006d2	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006d5	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 415  :                             state->mode = BAD;

  006dc	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 416  :                             break;

  006e3	e9 31 06 00 00	 jmp	 $LN503@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;

  006e8	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;

  006ee	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  006f5	8d 5a 70	 lea	 ebx, DWORD PTR [edx+112]
  006f8	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006fb	8d 8a f4 02 00
	00		 lea	 ecx, DWORD PTR [edx+756]
  00701	89 03		 mov	 DWORD PTR [ebx], eax
  00703	51		 push	 ecx
  00704	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  00707	b9 01 00 00 00	 mov	 ecx, 1
  0070c	50		 push	 eax
  0070d	53		 push	 ebx
  0070e	ff 72 64	 push	 DWORD PTR [edx+100]
  00711	8b 55 d0	 mov	 edx, DWORD PTR tv1719[ebp]
  00714	e8 00 00 00 00	 call	 _inflate_table
  00719	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  0071c	85 c0		 test	 eax, eax
  0071e	74 19		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  00720	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  00723	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00726	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
  0072d	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 467  :                 break;

  00734	e9 e0 05 00 00	 jmp	 $LN503@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00739	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  0073c	8b 03		 mov	 eax, DWORD PTR [ebx]

; 470  :             state->distbits = 6;

  0073e	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6

; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00745	8d 91 f4 02 00
	00		 lea	 edx, DWORD PTR [ecx+756]
  0074b	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  0074e	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  00751	52		 push	 edx
  00752	50		 push	 eax
  00753	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00756	53		 push	 ebx
  00757	ff 71 68	 push	 DWORD PTR [ecx+104]
  0075a	83 c1 74	 add	 ecx, 116		; 00000074H
  0075d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00760	b9 02 00 00 00	 mov	 ecx, 2
  00765	e8 00 00 00 00	 call	 _inflate_table

; 475  :                 state->mode = BAD;

  0076a	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0076d	83 c4 10	 add	 esp, 16			; 00000010H

; 476  :                 break;

  00770	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
  00773	85 c0		 test	 eax, eax
  00775	74 1c		 je	 SHORT $LN301@inflateBac

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {
; 474  :                 strm->msg = (char *)"invalid distances set";

  00777	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0077a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 475  :                 state->mode = BAD;

  00781	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 476  :                 break;

  00788	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0078b	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  0078e	e9 8f 05 00 00	 jmp	 $LN393@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00793	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  0079a	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0079d	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  007a0	83 fe 06	 cmp	 esi, 6
  007a3	0f 82 8c 00 00
	00		 jb	 $LN303@inflateBac
  007a9	81 7d e8 02 01
	00 00		 cmp	 DWORD PTR _left$1$[ebp], 258 ; 00000102H
  007b0	0f 82 7f 00 00
	00		 jb	 $LN303@inflateBac

; 484  :                 RESTORE();

  007b6	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007b9	8b 45 e4	 mov	 eax, DWORD PTR _put$1$[ebp]
  007bc	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007bf	8b 45 e8	 mov	 eax, DWORD PTR _left$1$[ebp]
  007c2	89 42 10	 mov	 DWORD PTR [edx+16], eax
  007c5	8b c2		 mov	 eax, edx
  007c7	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007ca	89 18		 mov	 DWORD PTR [eax], ebx
  007cc	8b d8		 mov	 ebx, eax
  007ce	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  007d1	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 485  :                 if (state->whave < state->wsize)

  007d4	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007d7	89 7a 40	 mov	 DWORD PTR [edx+64], edi
  007da	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007dd	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007df	8b c1		 mov	 eax, ecx
  007e1	2b 45 e8	 sub	 eax, DWORD PTR _left$1$[ebp]
  007e4	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007e7	51		 push	 ecx
  007e8	53		 push	 ebx
  007e9	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007ee	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  007f1	83 c4 08	 add	 esp, 8
  007f4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007f7	89 45 e4	 mov	 DWORD PTR _put$1$[ebp], eax
  007fa	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  007fd	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  007ff	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  00802	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00805	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00808	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  0080b	8b 7a 40	 mov	 edi, DWORD PTR [edx+64]
  0080e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00811	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00814	89 4d fc	 mov	 DWORD PTR _hold$1$[ebp], ecx
  00817	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi

; 489  :                 break;

  0081a	e9 03 05 00 00	 jmp	 $LN393@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  0081f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00822	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 370  :                 state->mode = BAD;

  00829	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 371  :                 break;

  00830	e9 e4 04 00 00	 jmp	 $LN503@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00835	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00838	ba 01 00 00 00	 mov	 edx, 1
  0083d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00840	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00843	d3 e2		 shl	 edx, cl
  00845	4a		 dec	 edx
  00846	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00849	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  0084c	8b c8		 mov	 ecx, eax
  0084e	c1 e9 08	 shr	 ecx, 8
  00851	0f b6 c9	 movzx	 ecx, cl
  00854	3b cf		 cmp	 ecx, edi
  00856	76 59		 jbe	 SHORT $LN382@inflateBac
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00858	85 f6		 test	 esi, esi
  0085a	75 1a		 jne	 SHORT $LN171@inflateBac
  0085c	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  0085f	50		 push	 eax
  00860	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00863	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00866	8b f0		 mov	 esi, eax
  00868	83 c4 08	 add	 esp, 8
  0086b	85 f6		 test	 esi, esi
  0086d	0f 84 db 04 00
	00		 je	 $LN369@inflateBac
  00873	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
$LN171@inflateBac:
  00876	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00879	8b cf		 mov	 ecx, edi
  0087b	d3 e0		 shl	 eax, cl
  0087d	43		 inc	 ebx
  0087e	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00881	ba 01 00 00 00	 mov	 edx, 1
  00886	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00889	83 c7 08	 add	 edi, 8
  0088c	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  0088f	4e		 dec	 esi
  00890	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00893	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00896	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00899	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0089c	d3 e2		 shl	 edx, cl
  0089e	4a		 dec	 edx
  0089f	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  008a2	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  008a5	8b c8		 mov	 ecx, eax
  008a7	c1 e9 08	 shr	 ecx, 8
  008aa	0f b6 c9	 movzx	 ecx, cl
  008ad	3b cf		 cmp	 ecx, edi
  008af	77 a7		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  008b1	84 c0		 test	 al, al
  008b3	0f 84 d8 00 00
	00		 je	 $LN488@inflateBac
  008b9	a8 f0		 test	 al, 240			; 000000f0H
  008bb	0f 85 d0 00 00
	00		 jne	 $LN488@inflateBac

; 499  :                 last = here;
; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  008c1	8b c8		 mov	 ecx, eax
  008c3	bb 01 00 00 00	 mov	 ebx, 1
  008c8	c1 e9 08	 shr	 ecx, 8
  008cb	8b d0		 mov	 edx, eax
  008cd	0f b6 f9	 movzx	 edi, cl
  008d0	89 4d d0	 mov	 DWORD PTR tv1718[ebp], ecx
  008d3	0f b6 c8	 movzx	 ecx, al
  008d6	03 cf		 add	 ecx, edi
  008d8	c1 e8 10	 shr	 eax, 16			; 00000010H
  008db	d3 e3		 shl	 ebx, cl
  008dd	8b cf		 mov	 ecx, edi
  008df	4b		 dec	 ebx
  008e0	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  008e3	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  008e6	d3 eb		 shr	 ebx, cl
  008e8	03 d8		 add	 ebx, eax
  008ea	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  008ed	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  008f0	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008f3	8b c8		 mov	 ecx, eax
  008f5	c1 e9 08	 shr	 ecx, 8
  008f8	0f b6 f9	 movzx	 edi, cl
  008fb	8b 4d d0	 mov	 ecx, DWORD PTR tv1718[ebp]
  008fe	0f b6 c9	 movzx	 ecx, cl
  00901	03 f9		 add	 edi, ecx
  00903	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  00906	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00909	76 7a		 jbe	 SHORT $LN185@inflateBac
  0090b	0f 1f 44 00 00	 npad	 5
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  00910	85 f6		 test	 esi, esi
  00912	75 1f		 jne	 SHORT $LN484@inflateBac
  00914	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00917	50		 push	 eax
  00918	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0091b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0091e	8b f0		 mov	 esi, eax
  00920	83 c4 08	 add	 esp, 8
  00923	85 f6		 test	 esi, esi
  00925	0f 84 23 04 00
	00		 je	 $LN369@inflateBac
  0092b	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  0092e	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
  00931	eb 03		 jmp	 SHORT $LN180@inflateBac
$LN484@inflateBac:
  00933	8b 5d f0	 mov	 ebx, DWORD PTR _next$5$[ebp]
$LN180@inflateBac:
  00936	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00939	8b cf		 mov	 ecx, edi
  0093b	d3 e0		 shl	 eax, cl
  0093d	83 c7 08	 add	 edi, 8
  00940	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00943	43		 inc	 ebx
  00944	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  00948	4e		 dec	 esi
  00949	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  0094c	bf 01 00 00 00	 mov	 edi, 1
  00951	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00954	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
  00957	0f b6 de	 movzx	 ebx, dh
  0095a	0f b6 ca	 movzx	 ecx, dl
  0095d	03 cb		 add	 ecx, ebx
  0095f	d3 e7		 shl	 edi, cl
  00961	8b cb		 mov	 ecx, ebx
  00963	4f		 dec	 edi
  00964	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  00967	d3 ef		 shr	 edi, cl
  00969	03 f8		 add	 edi, eax
  0096b	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0096e	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00971	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00974	8b c8		 mov	 ecx, eax
  00976	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00979	c1 e9 08	 shr	 ecx, 8
  0097c	0f b6 c9	 movzx	 ecx, cl
  0097f	03 cb		 add	 ecx, ebx
  00981	3b cf		 cmp	 ecx, edi
  00983	77 8b		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  00985	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  00988	0f b6 ce	 movzx	 ecx, dh
  0098b	d3 eb		 shr	 ebx, cl
  0098d	2b f9		 sub	 edi, ecx
  0098f	eb 03		 jmp	 SHORT $LN184@inflateBac
$LN488@inflateBac:
  00991	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);
; 509  :             state->length = (unsigned)here.val;

  00994	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00997	8b c8		 mov	 ecx, eax
  00999	c1 e9 08	 shr	 ecx, 8
  0099c	0f b6 c9	 movzx	 ecx, cl
  0099f	d3 eb		 shr	 ebx, cl
  009a1	2b f9		 sub	 edi, ecx
  009a3	8b c8		 mov	 ecx, eax
  009a5	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  009a8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009ab	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  009ae	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  009b1	84 c0		 test	 al, al
  009b3	75 45		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  009b5	83 7d e8 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  009b9	75 24		 jne	 SHORT $LN495@inflateBac
  009bb	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  009be	8b 5a 38	 mov	 ebx, DWORD PTR [edx+56]
  009c1	50		 push	 eax
  009c2	53		 push	 ebx
  009c3	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009c6	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  009c9	89 42 30	 mov	 DWORD PTR [edx+48], eax
  009cc	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  009d2	85 c0		 test	 eax, eax
  009d4	0f 85 8e 03 00
	00		 jne	 $LN372@inflateBac
  009da	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  009dd	eb 03		 jmp	 SHORT $LN189@inflateBac
$LN495@inflateBac:
  009df	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009e2	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  009e5	88 03		 mov	 BYTE PTR [ebx], al
  009e7	43		 inc	 ebx

; 518  :                 left--;

  009e8	ff 4d e8	 dec	 DWORD PTR _left$1$[ebp]
  009eb	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx

; 519  :                 state->mode = LEN;

  009ee	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 520  :                 break;

  009f5	e9 1f 03 00 00	 jmp	 $LN503@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009fa	a8 20		 test	 al, 32			; 00000020H
  009fc	74 0c		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009fe	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 527  :                 break;

  00a05	e9 0f 03 00 00	 jmp	 $LN503@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  00a0a	a8 40		 test	 al, 64			; 00000040H
  00a0c	74 16		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  00a0e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00a11	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 533  :                 state->mode = BAD;

  00a18	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 534  :                 break;

  00a1f	e9 f5 02 00 00	 jmp	 $LN503@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00a24	0f b6 c0	 movzx	 eax, al
  00a27	83 e0 0f	 and	 eax, 15			; 0000000fH
  00a2a	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 539  :             if (state->extra != 0) {

  00a2d	74 5b		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a2f	3b f8		 cmp	 edi, eax
  00a31	73 3d		 jae	 SHORT $LN192@inflateBac
  00a33	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LL195@inflateBac:
  00a36	85 f6		 test	 esi, esi
  00a38	75 1d		 jne	 SHORT $LN200@inflateBac
  00a3a	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00a3d	50		 push	 eax
  00a3e	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a41	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a44	8b f0		 mov	 esi, eax
  00a46	83 c4 08	 add	 esp, 8
  00a49	85 f6		 test	 esi, esi
  00a4b	0f 84 fd 02 00
	00		 je	 $LN369@inflateBac
  00a51	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a54	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a57	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a5a	8b cf		 mov	 ecx, edi
  00a5c	d3 e0		 shl	 eax, cl
  00a5e	83 c7 08	 add	 edi, 8
  00a61	03 d8		 add	 ebx, eax
  00a63	4e		 dec	 esi
  00a64	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00a67	40		 inc	 eax
  00a68	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00a6b	3b 7a 4c	 cmp	 edi, DWORD PTR [edx+76]
  00a6e	72 c6		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a70	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a73	b8 01 00 00 00	 mov	 eax, 1
  00a78	d3 e0		 shl	 eax, cl
  00a7a	48		 dec	 eax
  00a7b	23 c3		 and	 eax, ebx

; 542  :                 DROPBITS(state->extra);

  00a7d	d3 eb		 shr	 ebx, cl
  00a7f	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a82	2b f9		 sub	 edi, ecx
  00a84	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00a87	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a8a	8b 5d f4	 mov	 ebx, DWORD PTR _state$1$[ebp]
  00a8d	ba 01 00 00 00	 mov	 edx, 1
  00a92	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00a95	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00a98	d3 e2		 shl	 edx, cl
  00a9a	4a		 dec	 edx
  00a9b	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00a9e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00aa1	8b c8		 mov	 ecx, eax
  00aa3	c1 e9 08	 shr	 ecx, 8
  00aa6	0f b6 c9	 movzx	 ecx, cl
  00aa9	3b cf		 cmp	 ecx, edi
  00aab	76 56		 jbe	 SHORT $LN477@inflateBac
  00aad	0f 1f 00	 npad	 3
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00ab0	85 f6		 test	 esi, esi
  00ab2	75 17		 jne	 SHORT $LN212@inflateBac
  00ab4	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00ab7	50		 push	 eax
  00ab8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00abb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00abe	8b f0		 mov	 esi, eax
  00ac0	83 c4 08	 add	 esp, 8
  00ac3	85 f6		 test	 esi, esi
  00ac5	0f 84 83 02 00
	00		 je	 $LN369@inflateBac
$LN212@inflateBac:
  00acb	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00ace	8b cf		 mov	 ecx, edi
  00ad0	83 c7 08	 add	 edi, 8
  00ad3	4e		 dec	 esi
  00ad4	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00ad7	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00ada	42		 inc	 edx
  00adb	d3 e0		 shl	 eax, cl
  00add	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00ae0	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00ae3	ba 01 00 00 00	 mov	 edx, 1
  00ae8	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00aeb	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00aee	d3 e2		 shl	 edx, cl
  00af0	4a		 dec	 edx
  00af1	23 55 fc	 and	 edx, DWORD PTR _hold$1$[ebp]
  00af4	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00af7	8b c8		 mov	 ecx, eax
  00af9	c1 e9 08	 shr	 ecx, 8
  00afc	0f b6 c9	 movzx	 ecx, cl
  00aff	3b cf		 cmp	 ecx, edi
  00b01	77 ad		 ja	 SHORT $LL206@inflateBac
$LN477@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00b03	a8 f0		 test	 al, 240			; 000000f0H
  00b05	0f 85 c3 00 00
	00		 jne	 $LN489@inflateBac

; 553  :                 last = here;
; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00b0b	8b c8		 mov	 ecx, eax
  00b0d	bb 01 00 00 00	 mov	 ebx, 1
  00b12	c1 e9 08	 shr	 ecx, 8
  00b15	8b d0		 mov	 edx, eax
  00b17	0f b6 f9	 movzx	 edi, cl
  00b1a	89 4d d0	 mov	 DWORD PTR tv1717[ebp], ecx
  00b1d	0f b6 c8	 movzx	 ecx, al
  00b20	03 cf		 add	 ecx, edi
  00b22	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b25	d3 e3		 shl	 ebx, cl
  00b27	8b cf		 mov	 ecx, edi
  00b29	4b		 dec	 ebx
  00b2a	89 55 e0	 mov	 DWORD PTR _last$[ebp], edx
  00b2d	23 5d fc	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00b30	d3 eb		 shr	 ebx, cl
  00b32	03 d8		 add	 ebx, eax
  00b34	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b37	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b3a	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b3d	8b c8		 mov	 ecx, eax
  00b3f	c1 e9 08	 shr	 ecx, 8
  00b42	0f b6 f9	 movzx	 edi, cl
  00b45	8b 4d d0	 mov	 ecx, DWORD PTR tv1717[ebp]
  00b48	0f b6 c9	 movzx	 ecx, cl
  00b4b	03 f9		 add	 edi, ecx
  00b4d	3b 7d ec	 cmp	 edi, DWORD PTR _bits$1$[ebp]
  00b50	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00b53	76 6d		 jbe	 SHORT $LN226@inflateBac
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b55	85 f6		 test	 esi, esi
  00b57	75 1a		 jne	 SHORT $LN221@inflateBac
  00b59	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00b5c	50		 push	 eax
  00b5d	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b60	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b63	8b f0		 mov	 esi, eax
  00b65	83 c4 08	 add	 esp, 8
  00b68	85 f6		 test	 esi, esi
  00b6a	0f 84 de 01 00
	00		 je	 $LN369@inflateBac
  00b70	8b 55 e0	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b73	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00b76	8b cf		 mov	 ecx, edi
  00b78	83 c7 08	 add	 edi, 8
  00b7b	4e		 dec	 esi
  00b7c	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00b7f	bf 01 00 00 00	 mov	 edi, 1
  00b84	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00b87	43		 inc	 ebx
  00b88	d3 e0		 shl	 eax, cl
  00b8a	01 45 fc	 add	 DWORD PTR _hold$1$[ebp], eax
  00b8d	0f b7 45 e2	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b91	89 5d f8	 mov	 DWORD PTR _next$[ebp], ebx
  00b94	0f b6 de	 movzx	 ebx, dh
  00b97	0f b6 ca	 movzx	 ecx, dl
  00b9a	03 cb		 add	 ecx, ebx
  00b9c	d3 e7		 shl	 edi, cl
  00b9e	8b cb		 mov	 ecx, ebx
  00ba0	4f		 dec	 edi
  00ba1	23 7d fc	 and	 edi, DWORD PTR _hold$1$[ebp]
  00ba4	d3 ef		 shr	 edi, cl
  00ba6	03 f8		 add	 edi, eax
  00ba8	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00bab	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00bae	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00bb1	8b c8		 mov	 ecx, eax
  00bb3	8b 7d ec	 mov	 edi, DWORD PTR _bits$1$[ebp]
  00bb6	c1 e9 08	 shr	 ecx, 8
  00bb9	0f b6 c9	 movzx	 ecx, cl
  00bbc	03 cb		 add	 ecx, ebx
  00bbe	3b cf		 cmp	 ecx, edi
  00bc0	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00bc2	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
  00bc5	0f b6 ce	 movzx	 ecx, dh
  00bc8	d3 eb		 shr	 ebx, cl
  00bca	2b f9		 sub	 edi, ecx
  00bcc	eb 03		 jmp	 SHORT $LN225@inflateBac
$LN489@inflateBac:
  00bce	8b 5d fc	 mov	 ebx, DWORD PTR _hold$1$[ebp]
$LN225@inflateBac:

; 565  :                 state->mode = BAD;

  00bd1	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bd4	8b c8		 mov	 ecx, eax
  00bd6	c1 e9 08	 shr	 ecx, 8
  00bd9	0f b6 c9	 movzx	 ecx, cl
  00bdc	d3 eb		 shr	 ebx, cl
  00bde	2b f9		 sub	 edi, ecx
  00be0	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00be3	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
  00be6	a8 40		 test	 al, 64			; 00000040H
  00be8	74 16		 je	 SHORT $LN327@inflateBac

; 561  :             }
; 562  :             DROPBITS(here.bits);
; 563  :             if (here.op & 64) {
; 564  :                 strm->msg = (char *)"invalid distance code";

  00bea	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bed	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 565  :                 state->mode = BAD;

  00bf4	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 566  :                 break;

  00bfb	e9 19 01 00 00	 jmp	 $LN503@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00c00	8b c8		 mov	 ecx, eax

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00c02	0f b6 c0	 movzx	 eax, al
  00c05	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c08	83 e0 0f	 and	 eax, 15			; 0000000fH
  00c0b	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
  00c0e	89 42 4c	 mov	 DWORD PTR [edx+76], eax

; 572  :             if (state->extra != 0) {

  00c11	74 61		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00c13	3b f8		 cmp	 edi, eax
  00c15	73 43		 jae	 SHORT $LN230@inflateBac
  00c17	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00c1a	66 0f 1f 44 00
	00		 npad	 6
$LL233@inflateBac:
  00c20	85 f6		 test	 esi, esi
  00c22	75 1d		 jne	 SHORT $LN238@inflateBac
  00c24	8d 45 f8	 lea	 eax, DWORD PTR _next$[ebp]
  00c27	50		 push	 eax
  00c28	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c2b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c2e	8b f0		 mov	 esi, eax
  00c30	83 c4 08	 add	 esp, 8
  00c33	85 f6		 test	 esi, esi
  00c35	0f 84 13 01 00
	00		 je	 $LN369@inflateBac
  00c3b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c3e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c41	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c44	8b cf		 mov	 ecx, edi
  00c46	d3 e0		 shl	 eax, cl
  00c48	83 c7 08	 add	 edi, 8
  00c4b	03 d8		 add	 ebx, eax
  00c4d	4e		 dec	 esi
  00c4e	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00c51	40		 inc	 eax
  00c52	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax
  00c55	3b 7a 4c	 cmp	 edi, DWORD PTR [edx+76]
  00c58	72 c6		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c5a	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00c5d	b8 01 00 00 00	 mov	 eax, 1
  00c62	d3 e0		 shl	 eax, cl
  00c64	48		 dec	 eax
  00c65	23 c3		 and	 eax, ebx

; 575  :                 DROPBITS(state->extra);

  00c67	d3 eb		 shr	 ebx, cl
  00c69	01 42 48	 add	 DWORD PTR [edx+72], eax
  00c6c	2b f9		 sub	 edi, ecx
  00c6e	89 5d fc	 mov	 DWORD PTR _hold$1$[ebp], ebx
  00c71	89 7d ec	 mov	 DWORD PTR _bits$1$[ebp], edi
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c74	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c77	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00c7a	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00c7d	1b c0		 sbb	 eax, eax
  00c7f	23 c3		 and	 eax, ebx
  00c81	2b c8		 sub	 ecx, eax
  00c83	39 4a 48	 cmp	 DWORD PTR [edx+72], ecx
  00c86	76 18		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c88	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c8b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 580  :                 state->mode = BAD;

  00c92	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 581  :                 break;

  00c99	eb 7e		 jmp	 SHORT $LN503@inflateBac
  00c9b	0f 1f 44 00 00	 npad	 5
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00ca0	85 db		 test	 ebx, ebx
  00ca2	75 27		 jne	 SHORT $LN496@inflateBac
  00ca4	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00ca7	8b 5a 38	 mov	 ebx, DWORD PTR [edx+56]
  00caa	50		 push	 eax
  00cab	53		 push	 ebx
  00cac	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00caf	89 5d e4	 mov	 DWORD PTR _put$1$[ebp], ebx
  00cb2	89 45 e8	 mov	 DWORD PTR _left$1$[ebp], eax
  00cb5	89 42 30	 mov	 DWORD PTR [edx+48], eax
  00cb8	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00cbb	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cbe	85 c0		 test	 eax, eax
  00cc0	0f 85 a2 00 00
	00		 jne	 $LN372@inflateBac
  00cc6	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cc9	eb 03		 jmp	 SHORT $LN247@inflateBac
$LN496@inflateBac:
  00ccb	8b 5d e4	 mov	 ebx, DWORD PTR _put$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00cce	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00cd1	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00cd4	2b c1		 sub	 eax, ecx

; 589  :                 if (copy < left) {

  00cd6	3b 45 e8	 cmp	 eax, DWORD PTR _left$1$[ebp]
  00cd9	73 09		 jae	 SHORT $LN334@inflateBac

; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;

  00cdb	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00cde	03 d8		 add	 ebx, eax
  00ce0	2b c8		 sub	 ecx, eax

; 592  :                 }

  00ce2	eb 05		 jmp	 SHORT $LN335@inflateBac
$LN334@inflateBac:

; 593  :                 else {
; 594  :                     from = put - state->offset;

  00ce4	2b d9		 sub	 ebx, ecx

; 595  :                     copy = left;

  00ce6	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN335@inflateBac:

; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00ce9	3b 4a 44	 cmp	 ecx, DWORD PTR [edx+68]
  00cec	0f 47 4a 44	 cmova	 ecx, DWORD PTR [edx+68]

; 598  :                 state->length -= copy;

  00cf0	29 4a 44	 sub	 DWORD PTR [edx+68], ecx

; 599  :                 left -= copy;

  00cf3	29 4d e8	 sub	 DWORD PTR _left$1$[ebp], ecx

; 602  :                 } while (--copy);

  00cf6	8b 55 e4	 mov	 edx, DWORD PTR _put$1$[ebp]
  00cf9	2b da		 sub	 ebx, edx
  00cfb	0f 1f 44 00 00	 npad	 5
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00d00	8a 04 13	 mov	 al, BYTE PTR [ebx+edx]
  00d03	88 02		 mov	 BYTE PTR [edx], al
  00d05	42		 inc	 edx

; 602  :                 } while (--copy);

  00d06	83 e9 01	 sub	 ecx, 1
  00d09	75 f5		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00d0b	8b 5d e8	 mov	 ebx, DWORD PTR _left$1$[ebp]
  00d0e	89 55 e4	 mov	 DWORD PTR _put$1$[ebp], edx
  00d11	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d14	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00d17	75 87		 jne	 SHORT $LL246@inflateBac
$LN503@inflateBac:
  00d19	8b 5d f8	 mov	 ebx, DWORD PTR _next$[ebp]
  00d1c	89 5d f0	 mov	 DWORD PTR _next$5$[ebp], ebx
$LN490@inflateBac:
  00d1f	8b 4d fc	 mov	 ecx, DWORD PTR _hold$1$[ebp]
$LN393@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d22	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d25	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00d2a	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d2d	0f 86 4d f3 ff
	ff		 jbe	 $LL2@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d33	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN483@inflateBac:
  00d38	8b 45 f0	 mov	 eax, DWORD PTR _next$5$[ebp]
$inf_leave$507:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d3b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d3e	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d40	8b c7		 mov	 eax, edi
  00d42	5f		 pop	 edi
  00d43	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d46	5e		 pop	 esi
  00d47	5b		 pop	 ebx

; 629  : }

  00d48	8b e5		 mov	 esp, ebp
  00d4a	5d		 pop	 ebp
  00d4b	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d4e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d51	33 c0		 xor	 eax, eax
  00d53	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d58	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d5a	8b c7		 mov	 eax, edi
  00d5c	5f		 pop	 edi
  00d5d	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d60	5e		 pop	 esi
  00d61	5b		 pop	 ebx

; 629  : }

  00d62	8b e5		 mov	 esp, ebp
  00d64	5d		 pop	 ebp
  00d65	c2 14 00	 ret	 20			; 00000014H
$LN372@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d68	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d6b	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d70	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00d73	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00d75	8b c7		 mov	 eax, edi
  00d77	5f		 pop	 edi
  00d78	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00d7b	5e		 pop	 esi
  00d7c	5b		 pop	 ebx

; 629  : }

  00d7d	8b e5		 mov	 esp, ebp
  00d7f	5d		 pop	 ebp
  00d80	c2 14 00	 ret	 20			; 00000014H
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d83	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00d86	bf 01 00 00 00	 mov	 edi, 1
  00d8b	8b 4d e8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d8e	3b c8		 cmp	 ecx, eax
  00d90	73 a6		 jae	 SHORT $LN483@inflateBac

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d92	2b c1		 sub	 eax, ecx
  00d94	50		 push	 eax
  00d95	ff 72 38	 push	 DWORD PTR [edx+56]
  00d98	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d9b	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d9e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00da1	85 c0		 test	 eax, eax

; 611  :                     ret = Z_BUF_ERROR;
; 612  :             }
; 613  :             goto inf_leave;

  00da3	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00da6	74 93		 je	 SHORT $inf_leave$507

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00da8	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00dab	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00db0	89 01		 mov	 DWORD PTR [ecx], eax

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00db2	8b c7		 mov	 eax, edi
  00db4	5f		 pop	 edi
  00db5	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00db8	5e		 pop	 esi
  00db9	5b		 pop	 ebx

; 629  : }

  00dba	8b e5		 mov	 esp, ebp
  00dbc	5d		 pop	 ebp
  00dbd	c2 14 00	 ret	 20			; 00000014H
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00dc0	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00dc5	e9 6e ff ff ff	 jmp	 $LN483@inflateBac
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00dca	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00dcf	8b e5		 mov	 esp, ebp
  00dd1	5d		 pop	 ebp
  00dd2	c2 14 00	 ret	 20			; 00000014H
  00dd5	0f 1f 00	 npad	 3
$LN505@inflateBac:
  00dd8	00 00 00 00	 DD	 $LN255@inflateBac
  00ddc	00 00 00 00	 DD	 $LN31@inflateBac
  00de0	00 00 00 00	 DD	 $LN56@inflateBac
  00de4	00 00 00 00	 DD	 $LN302@inflateBac
  00de8	00 00 00 00	 DD	 $LN337@inflateBac
  00dec	00 00 00 00	 DD	 $LN340@inflateBac
  00df0	00 00 00 00	 DD	 $LN341@inflateBac
$LN471@inflateBac:
  00df4	00		 DB	 0
  00df5	06		 DB	 6
  00df6	01		 DB	 1
  00df7	06		 DB	 6
  00df8	06		 DB	 6
  00df9	02		 DB	 2
  00dfa	06		 DB	 6
  00dfb	06		 DB	 6
  00dfc	06		 DB	 6
  00dfd	03		 DB	 3
  00dfe	06		 DB	 6
  00dff	06		 DB	 6
  00e00	06		 DB	 6
  00e01	06		 DB	 6
  00e02	06		 DB	 6
  00e03	06		 DB	 6
  00e04	06		 DB	 6
  00e05	04		 DB	 4
  00e06	05		 DB	 5
  00e07	90		 npad	 1
$LN506@inflateBac:
  00e08	00 00 00 00	 DD	 $LN259@inflateBac
  00e0c	00 00 00 00	 DD	 $LN260@inflateBac
  00e10	00 00 00 00	 DD	 $LN261@inflateBac
  00e14	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lucas\documents\quazip\zlib1211\zlib-1.2.11\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
