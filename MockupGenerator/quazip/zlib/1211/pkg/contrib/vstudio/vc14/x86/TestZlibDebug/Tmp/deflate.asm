; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	F:\Swerve\Libs\zlib1211\zlib-1.2.11\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.11 Copyright 1995-2017 Jean-loup Gail'
	DB	'ly and Mark Adler ', 00H
	ORG $+3
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflate@8
PUBLIC	_deflateEnd@4
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateCopy@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateParams@12
PUBLIC	_deflateTune@20
PUBLIC	_deflateBound@8
PUBLIC	_deflatePending@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateInit_@16
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateResetKeep@4
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
EXTRN	_zcalloc:PROC
EXTRN	_zcfree:PROC
EXTRN	__tr_init:PROC
EXTRN	__tr_flush_block:PROC
EXTRN	__tr_flush_bits:PROC
EXTRN	__tr_align:PROC
EXTRN	__tr_stored_block:PROC
EXTRN	_match_init:PROC
EXTRN	_longest_match:PROC
EXTRN	_z_errmsg:BYTE
EXTRN	__length_code:BYTE
EXTRN	__dist_code:BYTE
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC

; 1168 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1169 :     unsigned len = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx

; 1170 : 
; 1171 :     if (len > size) len = size;

	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN2@read_buf
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN2@read_buf:

; 1172 :     if (len == 0) return 0;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@read_buf
	xor	eax, eax
	jmp	$LN1@read_buf
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1177 :     if (strm->state->wrap == 1) {

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax

; 1179 :     }

	jmp	SHORT $LN5@read_buf
$LN4@read_buf:

; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	jne	SHORT $LN5@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN5@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], eax

; 1186 :     strm->total_in += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1187 : 
; 1188 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN1@read_buf:

; 1189 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC

; 732  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 735  : 
; 736  :     _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 737  :     len = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _len$[ebp], ecx

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@flush_pend
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _len$[ebp], edx
$LN2@flush_pend:

; 739  :     if (len == 0) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@flush_pend
	jmp	SHORT $LN1@flush_pend
$LN3@flush_pend:

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 742  :     strm->next_out  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 743  :     s->pending_out  += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 744  :     strm->total_out += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 745  :     strm->avail_out -= len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 746  :     s->pending      -= len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 747  :     if (s->pending == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN1@flush_pend

; 748  :         s->pending_out = s->pending_buf;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx
$LN1@flush_pend:

; 749  :     }
; 750  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC

; 719  : {

	push	ebp
	mov	ebp, esp

; 720  :     put_byte(s, (Byte)(b >> 8));

	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 721  :     put_byte(s, (Byte)(b & 0xff));

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 722  : }

	pop	ebp
	ret	0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC

; 1196 : {

	push	ebp
	mov	ebp, esp

; 1197 :     s->window_size = (ulg)2L*s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1198 : 
; 1199 :     CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	movzx	ecx, WORD PTR _configuration_table[eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+140], edx

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

	mov	ecx, DWORD PTR _s$[ebp]
	imul	edx, DWORD PTR [ecx+132], 12
	movzx	eax, WORD PTR _configuration_table[edx+4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	movzx	ecx, WORD PTR _configuration_table[eax+6]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+124], ecx

; 1207 : 
; 1208 :     s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1209 :     s->block_start = 0L;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], 0

; 1210 :     s->lookahead = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], 0

; 1211 :     s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+120], 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2

; 1213 :     s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1214 :     s->ins_h = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], 0

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */

	call	_match_init

; 1218 : #endif
; 1219 : #endif
; 1220 : }

	pop	ebp
	ret	0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_bflush$ = -24						; size = 4
tv205 = -20						; size = 4
tv182 = -16						; size = 4
tv159 = -12						; size = 4
tv138 = -8						; size = 4
_cc$1 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC

; 2133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
$LN4@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN5@deflate_hu

; 2139 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 2140 :             if (s->lookahead == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN5@deflate_hu

; 2141 :                 if (flush == Z_NO_FLUSH)

	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN7@deflate_hu

; 2142 :                     return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN7@deflate_hu:

; 2143 :                 break;      /* flush the current block */

	jmp	$LN3@deflate_hu
$LN5@deflate_hu:

; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR _cc$1[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], eax
	jne	SHORT $LN15@deflate_hu
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN16@deflate_hu
$LN15@deflate_hu:
	mov	DWORD PTR tv138[ebp], 0
$LN16@deflate_hu:
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 2151 :         s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 2152 :         s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN8@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN17@deflate_hu
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN18@deflate_hu
$LN17@deflate_hu:
	mov	DWORD PTR tv159[ebp], 0
$LN18@deflate_hu:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv159[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN8@deflate_hu
	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN8@deflate_hu:

; 2154 :     }

	jmp	$LN4@deflate_hu
$LN3@deflate_hu:

; 2155 :     s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0

; 2156 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN19@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN20@deflate_hu
$LN19@deflate_hu:
	mov	DWORD PTR tv182[ebp], 0
$LN20@deflate_hu:
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv182[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN11@deflate_hu
	mov	eax, 2
	jmp	$LN1@deflate_hu
$LN11@deflate_hu:

; 2158 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_hu
$LN10@deflate_hu:

; 2159 :     }
; 2160 :     if (s->last_lit)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], 0
	je	SHORT $LN12@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN21@deflate_hu
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN22@deflate_hu
$LN21@deflate_hu:
	mov	DWORD PTR tv205[ebp], 0
$LN22@deflate_hu:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv205[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN12@deflate_hu
	xor	eax, eax
	jmp	SHORT $LN1@deflate_hu
$LN12@deflate_hu:

; 2162 :     return block_done;

	mov	eax, 1
$LN1@deflate_hu:

; 2163 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_huff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv350 = -48						; size = 4
tv327 = -44						; size = 4
tv304 = -40						; size = 4
_bflush$ = -36						; size = 4
tv283 = -32						; size = 4
tv238 = -28						; size = 4
_strend$ = -24						; size = 4
tv221 = -20						; size = 4
_prev$ = -16						; size = 4
_scan$ = -12						; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC

; 2060 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
$LN4@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 258		; 00000102H
	ja	SHORT $LN8@deflate_rl

; 2071 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 258		; 00000102H
	ja	SHORT $LN9@deflate_rl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_rl

; 2073 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN9@deflate_rl:

; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_rl
	jmp	$LN3@deflate_rl
$LN8@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 3
	jb	$LN11@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jbe	$LN11@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _scan$[ebp], edx

; 2082 :             prev = *scan;

	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _prev$[ebp], ecx

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	lea	eax, DWORD PTR [eax+edx+258]
	mov	DWORD PTR _strend$[ebp], eax
$LN5@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	cmp	ecx, DWORD PTR _strend$[ebp]
	jb	$LN5@deflate_rl
$LN6@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

	mov	edx, DWORD PTR _strend$[ebp]
	sub	edx, DWORD PTR _scan$[ebp]
	mov	eax, 258				; 00000102H
	sub	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 2092 :                 if (s->match_length > s->lookahead)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+116]
	jbe	SHORT $LN11@deflate_rl

; 2093 :                     s->match_length = s->lookahead;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+96], ecx
$LN11@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN15@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, 1
	mov	WORD PTR _dist$1[ebp], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$1[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$1[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$1[ebp], ax
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+1176]
	add	cx, 1
	movzx	edx, BYTE PTR _len$3[ebp]
	movzx	eax, BYTE PTR __length_code[edx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+eax*4+1176], cx
	movzx	eax, WORD PTR _dist$1[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN24@deflate_rl
	movzx	ecx, WORD PTR _dist$1[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv221[ebp], edx
	jmp	SHORT $LN25@deflate_rl
$LN24@deflate_rl:
	movzx	eax, WORD PTR _dist$1[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv221[ebp], ecx
$LN25@deflate_rl:
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5788]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], edx
	jne	SHORT $LN26@deflate_rl
	mov	DWORD PTR tv238[ebp], 1
	jmp	SHORT $LN27@deflate_rl
$LN26@deflate_rl:
	mov	DWORD PTR tv238[ebp], 0
$LN27@deflate_rl:
	mov	ecx, DWORD PTR tv238[ebp]
	mov	DWORD PTR _bflush$[ebp], ecx

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	sub	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 2105 :             s->strstart += s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 2106 :             s->match_length = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 2107 :         } else {

	jmp	$LN16@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _cc$2[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN28@deflate_rl
	mov	DWORD PTR tv283[ebp], 1
	jmp	SHORT $LN29@deflate_rl
$LN28@deflate_rl:
	mov	DWORD PTR tv283[ebp], 0
$LN29@deflate_rl:
	mov	eax, DWORD PTR tv283[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 2111 :             s->lookahead--;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 2112 :             s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN16@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN30@deflate_rl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv304[ebp], eax
	jmp	SHORT $LN31@deflate_rl
$LN30@deflate_rl:
	mov	DWORD PTR tv304[ebp], 0
$LN31@deflate_rl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv304[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN17@deflate_rl
	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN17@deflate_rl:

; 2115 :     }

	jmp	$LN4@deflate_rl
$LN3@deflate_rl:

; 2116 :     s->insert = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5812], 0

; 2117 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN32@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv327[ebp], edx
	jmp	SHORT $LN33@deflate_rl
$LN32@deflate_rl:
	mov	DWORD PTR tv327[ebp], 0
$LN33@deflate_rl:
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv327[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN20@deflate_rl
	mov	eax, 2
	jmp	$LN1@deflate_rl
$LN20@deflate_rl:

; 2119 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 2120 :     }
; 2121 :     if (s->last_lit)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], 0
	je	SHORT $LN21@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN34@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv350[ebp], ecx
	jmp	SHORT $LN35@deflate_rl
$LN34@deflate_rl:
	mov	DWORD PTR tv350[ebp], 0
$LN35@deflate_rl:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv350[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN21@deflate_rl
	xor	eax, eax
	jmp	SHORT $LN1@deflate_rl
$LN21@deflate_rl:

; 2123 :     return block_done;

	mov	eax, 1
$LN1@deflate_rl:

; 2124 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_max_insert$1 = -64					; size = 4
tv498 = -60						; size = 4
tv475 = -56						; size = 4
tv462 = -52						; size = 4
tv456 = -48						; size = 4
tv391 = -44						; size = 4
tv378 = -40						; size = 4
tv330 = -36						; size = 4
tv310 = -32						; size = 4
tv271 = -28						; size = 4
tv260 = -24						; size = 4
tv243 = -20						; size = 4
_bflush$ = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$2 = -8						; size = 2
_cc$3 = -3						; size = 1
_cc$4 = -2						; size = 1
_len$5 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC

; 1929 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
$LN4@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_sl

; 1941 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_sl

; 1943 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN9@deflate_sl:

; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_sl
	jmp	$LN3@deflate_sl
$LN8@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1952 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+100], edx

; 1959 :         s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+120]
	cmp	eax, DWORD PTR [edx+128]
	jae	SHORT $LN12@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	sub	edx, DWORD PTR _hash_head$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	ja	SHORT $LN12@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

	mov	edx, DWORD PTR _hash_head$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 5
	ja	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 1
	je	SHORT $LN14@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+96], 3
	jne	SHORT $LN12@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	cmp	ecx, 4096				; 00001000H
	jbe	SHORT $LN12@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2
$LN12@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 3
	jb	$LN15@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	cmp	eax, DWORD PTR [edx+120]
	ja	$LN15@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	lea	edx, DWORD PTR [edx+ecx-3]
	mov	DWORD PTR _max_insert$1[ebp], edx

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 3
	mov	BYTE PTR _len$5[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+100]
	mov	WORD PTR _dist$2[ebp], ax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5796]
	mov	cx, WORD PTR _dist$2[ebp]
	mov	WORD PTR [edx+eax*2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _len$5[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	dx, WORD PTR _dist$2[ebp]
	sub	dx, 1
	mov	WORD PTR _dist$2[ebp], dx
	movzx	eax, BYTE PTR _len$5[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$5[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	edx, WORD PTR _dist$2[ebp]
	cmp	edx, 256				; 00000100H
	jge	SHORT $LN30@deflate_sl
	movzx	eax, WORD PTR _dist$2[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv243[ebp], ecx
	jmp	SHORT $LN31@deflate_sl
$LN30@deflate_sl:
	movzx	edx, WORD PTR _dist$2[ebp]
	sar	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv243[ebp], eax
$LN31@deflate_sl:
	mov	ecx, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN32@deflate_sl
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN33@deflate_sl
$LN32@deflate_sl:
	mov	DWORD PTR tv260[ebp], 0
$LN33@deflate_sl:
	mov	eax, DWORD PTR tv260[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 2001 :             s->prev_length -= 2;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], ecx
$LN7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	DWORD PTR tv271[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR [edx+108], eax
	mov	ecx, DWORD PTR tv271[ebp]
	cmp	ecx, DWORD PTR _max_insert$1[ebp]
	ja	$LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	DWORD PTR tv310[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR [edx+120], eax
	cmp	DWORD PTR tv310[ebp], 0
	jne	$LN7@deflate_sl

; 2007 :             s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 2008 :             s->match_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2

; 2009 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN18@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN34@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv330[ebp], edx
	jmp	SHORT $LN35@deflate_sl
$LN34@deflate_sl:
	mov	DWORD PTR tv330[ebp], 0
$LN35@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv330[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN18@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN18@deflate_sl:
	jmp	$LN16@deflate_sl
$LN15@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	$LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax-1]
	mov	BYTE PTR _cc$4[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$4[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN36@deflate_sl
	mov	DWORD PTR tv378[ebp], 1
	jmp	SHORT $LN37@deflate_sl
$LN36@deflate_sl:
	mov	DWORD PTR tv378[ebp], 0
$LN37@deflate_sl:
	mov	eax, DWORD PTR tv378[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 2020 :             if (bflush) {

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN38@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv391[ebp], eax
	jmp	SHORT $LN39@deflate_sl
$LN38@deflate_sl:
	mov	DWORD PTR tv391[ebp], 0
$LN39@deflate_sl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv391[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2024 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 2025 :             if (s->strm->avail_out == 0) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN23@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN23@deflate_sl:

; 2026 :         } else {

	jmp	SHORT $LN16@deflate_sl
$LN20@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 1

; 2031 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2032 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN16@deflate_sl:

; 2033 :         }
; 2034 :     }

	jmp	$LN4@deflate_sl
$LN3@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN24@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx-1]
	mov	BYTE PTR _cc$3[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], eax
	jne	SHORT $LN40@deflate_sl
	mov	DWORD PTR tv456[ebp], 1
	jmp	SHORT $LN41@deflate_sl
$LN40@deflate_sl:
	mov	DWORD PTR tv456[ebp], 0
$LN41@deflate_sl:
	mov	edx, DWORD PTR tv456[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 2039 :         s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN24@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 2
	jae	SHORT $LN42@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR tv462[ebp], eax
	jmp	SHORT $LN43@deflate_sl
$LN42@deflate_sl:
	mov	DWORD PTR tv462[ebp], 2
$LN43@deflate_sl:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv462[ebp]
	mov	DWORD PTR [ecx+5812], edx

; 2042 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN44@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv475[ebp], edx
	jmp	SHORT $LN45@deflate_sl
$LN44@deflate_sl:
	mov	DWORD PTR tv475[ebp], 0
$LN45@deflate_sl:
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv475[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN26@deflate_sl
	mov	eax, 2
	jmp	$LN1@deflate_sl
$LN26@deflate_sl:

; 2044 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_sl
$LN25@deflate_sl:

; 2045 :     }
; 2046 :     if (s->last_lit)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], 0
	je	SHORT $LN27@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN46@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv498[ebp], ecx
	jmp	SHORT $LN47@deflate_sl
$LN46@deflate_sl:
	mov	DWORD PTR tv498[ebp], 0
$LN47@deflate_sl:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv498[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN27@deflate_sl
	xor	eax, eax
	jmp	SHORT $LN1@deflate_sl
$LN27@deflate_sl:

; 2048 :     return block_done;

	mov	eax, 1
$LN1@deflate_sl:

; 2049 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv424 = -48						; size = 4
tv401 = -44						; size = 4
tv388 = -40						; size = 4
tv374 = -36						; size = 4
_bflush$ = -32						; size = 4
tv353 = -28						; size = 4
tv288 = -24						; size = 4
tv233 = -20						; size = 4
tv216 = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC

; 1827 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
$LN4@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_fa

; 1838 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_fa

; 1840 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN9@deflate_fa:

; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_fa
	jmp	$LN3@deflate_fa
$LN8@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1849 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN11@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_fa:

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

	mov	ecx, DWORD PTR _hash_head$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	mov	WORD PTR _dist$1[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5796]
	mov	cx, WORD PTR _dist$1[ebp]
	mov	WORD PTR [edx+eax*2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	dx, WORD PTR _dist$1[ebp]
	sub	dx, 1
	mov	WORD PTR _dist$1[ebp], dx
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	edx, WORD PTR _dist$1[ebp]
	cmp	edx, 256				; 00000100H
	jge	SHORT $LN24@deflate_fa
	movzx	eax, WORD PTR _dist$1[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv216[ebp], ecx
	jmp	SHORT $LN25@deflate_fa
$LN24@deflate_fa:
	movzx	edx, WORD PTR _dist$1[ebp]
	sar	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv216[ebp], eax
$LN25@deflate_fa:
	mov	ecx, DWORD PTR tv216[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv216[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN26@deflate_fa
	mov	DWORD PTR tv233[ebp], 1
	jmp	SHORT $LN27@deflate_fa
$LN26@deflate_fa:
	mov	DWORD PTR tv233[ebp], 0
$LN27@deflate_fa:
	mov	eax, DWORD PTR tv233[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	sub	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+128]
	ja	$LN15@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 3
	jb	$LN15@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	DWORD PTR tv288[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR [edx+96], eax
	cmp	DWORD PTR tv288[ebp], 0
	jne	$LN7@deflate_fa

; 1886 :                 s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1887 :             } else

	jmp	SHORT $LN16@deflate_fa
$LN15@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], edx

; 1891 :                 s->match_length = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 0

; 1892 :                 s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN16@deflate_fa:

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

	jmp	$LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _cc$2[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN28@deflate_fa
	mov	DWORD PTR tv353[ebp], 1
	jmp	SHORT $LN29@deflate_fa
$LN28@deflate_fa:
	mov	DWORD PTR tv353[ebp], 0
$LN29@deflate_fa:
	mov	eax, DWORD PTR tv353[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1905 :             s->lookahead--;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1906 :             s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN14@deflate_fa:

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN30@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv374[ebp], eax
	jmp	SHORT $LN31@deflate_fa
$LN30@deflate_fa:
	mov	DWORD PTR tv374[ebp], 0
$LN31@deflate_fa:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv374[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN17@deflate_fa
	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN17@deflate_fa:

; 1909 :     }

	jmp	$LN4@deflate_fa
$LN3@deflate_fa:

; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 2
	jae	SHORT $LN32@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv388[ebp], ecx
	jmp	SHORT $LN33@deflate_fa
$LN32@deflate_fa:
	mov	DWORD PTR tv388[ebp], 2
$LN33@deflate_fa:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv388[ebp]
	mov	DWORD PTR [edx+5812], eax

; 1911 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN34@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv401[ebp], eax
	jmp	SHORT $LN35@deflate_fa
$LN34@deflate_fa:
	mov	DWORD PTR tv401[ebp], 0
$LN35@deflate_fa:
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv401[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN20@deflate_fa
	mov	eax, 2
	jmp	$LN1@deflate_fa
$LN20@deflate_fa:

; 1913 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_fa
$LN19@deflate_fa:

; 1914 :     }
; 1915 :     if (s->last_lit)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], 0
	je	SHORT $LN21@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN36@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv424[ebp], edx
	jmp	SHORT $LN37@deflate_fa
$LN36@deflate_fa:
	mov	DWORD PTR tv424[ebp], 0
$LN37@deflate_fa:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv424[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN21@deflate_fa
	xor	eax, eax
	jmp	SHORT $LN1@deflate_fa
$LN21@deflate_fa:

; 1917 :     return block_done;

	mov	eax, 1
$LN1@deflate_fa:

; 1918 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv404 = -56						; size = 4
tv390 = -52						; size = 4
tv384 = -48						; size = 4
tv371 = -44						; size = 4
tv367 = -40						; size = 4
tv287 = -36						; size = 4
tv139 = -32						; size = 4
tv71 = -28						; size = 4
_min_block$ = -24					; size = 4
_last$ = -20						; size = 4
_used$ = -16						; size = 4
_left$ = -12						; size = 4
_have$ = -8						; size = 4
_len$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC

; 1646 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+44]
	jbe	SHORT $LN31@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN32@deflate_st
$LN31@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 5
	mov	DWORD PTR tv71[ebp], eax
$LN32@deflate_st:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _min_block$[ebp], ecx

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;

	mov	DWORD PTR _last$[ebp], 0

; 1658 :     unsigned used = s->strm->avail_in;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _used$[ebp], ecx
$LN4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */

	mov	DWORD PTR _len$[ebp], 65535		; 0000ffffH

; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, 42					; 0000002aH
	sar	eax, 3
	mov	DWORD PTR _have$[ebp], eax

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _have$[ebp]
	jae	SHORT $LN5@deflate_st

; 1667 :             break;

	jmp	$LN3@deflate_st
$LN5@deflate_st:

; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _left$[ebp], eax

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	jbe	SHORT $LN6@deflate_st

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _len$[ebp], eax
$LN6@deflate_st:

; 1673 :         if (len > have)

	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _have$[ebp]
	jbe	SHORT $LN7@deflate_st

; 1674 :             len = have;                         /* limit len to the output */

	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN7@deflate_st:

; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _min_block$[ebp]
	jae	SHORT $LN8@deflate_st
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN10@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN9@deflate_st
$LN10@deflate_st:
	cmp	DWORD PTR _flush$[ebp], 0
	je	SHORT $LN9@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	je	SHORT $LN8@deflate_st
$LN9@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;

	jmp	$LN3@deflate_st
$LN8@deflate_st:

; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN33@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	jne	SHORT $LN33@deflate_st
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN34@deflate_st
$LN33@deflate_st:
	mov	DWORD PTR tv139[ebp], 0
$LN34@deflate_st:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [ecx+edx-4], al

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax-3], cl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

	mov	eax, DWORD PTR _len$[ebp]
	not	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx-2], al

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

	mov	edx, DWORD PTR _len$[ebp]
	not	edx
	shr	edx, 8
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

	cmp	DWORD PTR _left$[ebp], 0
	je	$LN11@deflate_st

; 1709 :             if (left > len)

	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jbe	SHORT $LN12@deflate_st

; 1710 :                 left = len;

	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _left$[ebp], ecx
$LN12@deflate_st:

; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	push	ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1712 :             s->strm->next_out += left;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], edx

; 1713 :             s->strm->avail_out -= left;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+16], ecx

; 1714 :             s->strm->total_out += left;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+20], eax

; 1715 :             s->block_start += left;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1716 :             len -= left;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN11@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH

; 1724 :             s->strm->next_out += len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+12], eax

; 1725 :             s->strm->avail_out -= len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], edx

; 1726 :             s->strm->total_out += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+20], ecx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

	cmp	DWORD PTR _last$[ebp], 0
	je	$LN4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _used$[ebp]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _used$[ebp], eax

; 1737 :     if (used) {

	je	$LN14@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _used$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1744 :             s->strstart = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+108], edx

; 1745 :         }

	jmp	$LN16@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+108]
	cmp	edx, DWORD PTR _used$[ebp]
	ja	SHORT $LN17@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+44]
	push	ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1751 :                 if (s->matches < 2)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5808], 2
	jae	SHORT $LN17@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5808]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5808], ecx
$LN17@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

	mov	eax, DWORD PTR _used$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _used$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+108]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1755 :             s->strstart += used;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _used$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN16@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	cmp	DWORD PTR _used$[ebp], eax
	jbe	SHORT $LN35@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	mov	DWORD PTR tv287[ebp], eax
	jmp	SHORT $LN36@deflate_st
$LN35@deflate_st:
	mov	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR tv287[ebp], ecx
$LN36@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5812]
	add	eax, DWORD PTR tv287[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], eax
$LN14@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5824]
	cmp	ecx, DWORD PTR [eax+108]
	jae	SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+5824], ecx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN20@deflate_st

; 1765 :         return finish_done;

	mov	eax, 3
	jmp	$LN1@deflate_st
$LN20@deflate_st:

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

	cmp	DWORD PTR _flush$[ebp], 0
	je	SHORT $LN21@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN21@deflate_st
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN21@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	cmp	eax, DWORD PTR [edx+92]
	jne	SHORT $LN21@deflate_st

; 1770 :         return block_done;

	mov	eax, 1
	jmp	$LN1@deflate_st
$LN21@deflate_st:

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR [edx+108]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	$LN22@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+92]
	cmp	eax, DWORD PTR [edx+44]
	jl	SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+92]
	sub	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 1777 :         s->strstart -= s->w_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+44]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1779 :         if (s->matches < 2)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5808], 2
	jae	SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5808]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _have$[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _have$[ebp], eax
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _have$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN24@deflate_st

; 1784 :         have = s->strm->avail_in;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _have$[ebp], eax
$LN24@deflate_st:

; 1785 :     if (have) {

	cmp	DWORD PTR _have$[ebp], 0
	je	SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

	mov	ecx, DWORD PTR _have$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH

; 1787 :         s->strstart += have;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _have$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5824]
	cmp	eax, DWORD PTR [edx+108]
	jae	SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+5824], eax
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	add	edx, 42					; 0000002aH
	sar	edx, 3
	mov	DWORD PTR _have$[ebp], edx

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _have$[ebp]
	cmp	ecx, 65535				; 0000ffffH
	jbe	SHORT $LN37@deflate_st
	mov	DWORD PTR tv367[ebp], 65535		; 0000ffffH
	jmp	SHORT $LN38@deflate_st
$LN37@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv367[ebp], eax
$LN38@deflate_st:
	mov	ecx, DWORD PTR tv367[ebp]
	mov	DWORD PTR _have$[ebp], ecx

; 1800 :     min_block = MIN(have, s->w_size);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _have$[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jbe	SHORT $LN39@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv371[ebp], edx
	jmp	SHORT $LN40@deflate_st
$LN39@deflate_st:
	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv371[ebp], eax
$LN40@deflate_st:
	mov	ecx, DWORD PTR tv371[ebp]
	mov	DWORD PTR _min_block$[ebp], ecx

; 1801 :     left = s->strstart - s->block_start;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _left$[ebp], ecx

; 1802 :     if (left >= min_block ||

	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _min_block$[ebp]
	jae	SHORT $LN28@deflate_st
	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN29@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	jne	$LN27@deflate_st
$LN29@deflate_st:
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN27@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN27@deflate_st
	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _have$[ebp]
	ja	$LN27@deflate_st
$LN28@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	SHORT $LN41@deflate_st
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv384[ebp], ecx
	jmp	SHORT $LN42@deflate_st
$LN41@deflate_st:
	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR tv384[ebp], edx
$LN42@deflate_st:
	mov	eax, DWORD PTR tv384[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN43@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN43@deflate_st
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jne	SHORT $LN43@deflate_st
	mov	DWORD PTR tv390[ebp], 1
	jmp	SHORT $LN44@deflate_st
$LN43@deflate_st:
	mov	DWORD PTR tv390[ebp], 0
$LN44@deflate_st:
	mov	ecx, DWORD PTR tv390[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1809 :         s->block_start += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 1810 :         flush_pending(s->strm);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN45@deflate_st
	mov	DWORD PTR tv404[ebp], 2
	jmp	SHORT $LN46@deflate_st
$LN45@deflate_st:
	mov	DWORD PTR tv404[ebp], 0
$LN46@deflate_st:
	mov	eax, DWORD PTR tv404[ebp]
$LN1@deflate_st:

; 1815 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_n$ = -24						; size = 4
_curr$1 = -20						; size = 4
_str$2 = -16						; size = 4
_wsize$ = -12						; size = 4
_init$3 = -8						; size = 4
_more$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC

; 1484 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx
$LN4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	sub	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+108]
	mov	DWORD PTR _more$[ebp], ecx

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {

	xor	eax, eax
	je	SHORT $LN7@fill_windo

; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

	cmp	DWORD PTR _more$[ebp], 0
	jne	SHORT $LN8@fill_windo
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	jne	SHORT $LN8@fill_windo
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN8@fill_windo

; 1497 :                 more = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
	jmp	SHORT $LN7@fill_windo
$LN8@fill_windo:

; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {

	cmp	DWORD PTR _more$[ebp], -1
	jne	SHORT $LN7@fill_windo

; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;

	mov	ecx, DWORD PTR _more$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _more$[ebp], ecx
$LN7@fill_windo:

; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _wsize$[ebp]
	lea	edx, DWORD PTR [ecx+eax-262]
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], edx
	jb	SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

	mov	ecx, DWORD PTR _wsize$[ebp]
	sub	ecx, DWORD PTR _more$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1513 :             s->match_start -= wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1515 :             s->block_start -= (long) wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1516 :             slide_hash(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_slide_hash
	add	esp, 4

; 1517 :             more += wsize;

	mov	ecx, DWORD PTR _more$[ebp]
	add	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], ecx
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@fill_windo
	jmp	$LN3@fill_windo
$LN12@fill_windo:

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

	mov	ecx, DWORD PTR _more$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+116]
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_read_buf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax

; 1535 :         s->lookahead += n;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+5812]
	cmp	eax, 3
	jb	$LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+5812]
	mov	DWORD PTR _str$2[ebp], ecx

; 1540 :             s->ins_h = s->window[str];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], edx

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [edx+ecx+1]
	xor	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], eax
$LN5@fill_windo:

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5812], 0
	je	$LN2@fill_windo

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [edx+ecx+2]
	xor	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], eax

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$2[ebp]
	and	esi, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+64]
	mov	ax, WORD PTR [eax+ecx*2]
	mov	WORD PTR [edx+esi*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	ax, WORD PTR _str$2[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 1551 :                 str++;

	mov	ecx, DWORD PTR _str$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$2[ebp], ecx

; 1552 :                 s->insert--;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5812]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], eax

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+5812]
	cmp	eax, 3
	jae	SHORT $LN14@fill_windo

; 1554 :                     break;

	jmp	SHORT $LN2@fill_windo
$LN14@fill_windo:

; 1555 :             }

	jmp	$LN5@fill_windo
$LN2@fill_windo:

; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN3@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5824]
	cmp	ecx, DWORD PTR [eax+60]
	jae	$LN1@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+116]
	mov	DWORD PTR _curr$1[ebp], eax

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5824]
	cmp	eax, DWORD PTR _curr$1[ebp]
	jae	SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sub	edx, DWORD PTR _curr$1[ebp]
	mov	DWORD PTR _init$3[ebp], edx

; 1579 :             if (init > WIN_INIT)

	cmp	DWORD PTR _init$3[ebp], 258		; 00000102H
	jbe	SHORT $LN19@fill_windo

; 1580 :                 init = WIN_INIT;

	mov	DWORD PTR _init$3[ebp], 258		; 00000102H
$LN19@fill_windo:

; 1581 :             zmemzero(s->window + curr, (unsigned)init);

	mov	eax, DWORD PTR _init$3[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _curr$1[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1582 :             s->high_water = curr + init;

	mov	eax, DWORD PTR _curr$1[ebp]
	add	eax, DWORD PTR _init$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5824], eax

; 1583 :         }

	jmp	$LN1@fill_windo
$LN17@fill_windo:

; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

	mov	edx, DWORD PTR _curr$1[ebp]
	add	edx, 258				; 00000102H
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5824], edx
	jae	SHORT $LN1@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

	mov	ecx, DWORD PTR _curr$1[ebp]
	add	ecx, 258				; 00000102H
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+5824]
	mov	DWORD PTR _init$3[ebp], ecx

; 1590 :             if (init > s->window_size - s->high_water)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	cmp	DWORD PTR _init$3[ebp], edx
	jbe	SHORT $LN21@fill_windo

; 1591 :                 init = s->window_size - s->high_water;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	mov	DWORD PTR _init$3[ebp], edx
$LN21@fill_windo:

; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

	mov	eax, DWORD PTR _init$3[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5824]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1593 :             s->high_water += init;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	add	edx, DWORD PTR _init$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5824], edx
$LN1@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv84 = -24						; size = 4
tv73 = -20						; size = 4
_wsize$ = -16						; size = 4
_m$ = -12						; size = 4
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_s$ = 8							; size = 4
_slide_hash PROC

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx

; 207  : 
; 208  :     n = s->hash_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _n$[ebp], eax

; 209  :     p = &s->head[n];

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

	mov	edx, DWORD PTR _m$[ebp]
	cmp	edx, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN9@slide_hash
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN10@slide_hash
$LN9@slide_hash:
	mov	DWORD PTR tv73[ebp], 0
$LN10@slide_hash:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR tv73[ebp]
	mov	WORD PTR [ecx], dx

; 213  :     } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN4@slide_hash

; 214  :     n = wsize;

	mov	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], edx
$LN7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN11@slide_hash
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN12@slide_hash
$LN11@slide_hash:
	mov	DWORD PTR tv84[ebp], 0
$LN12@slide_hash:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv84[ebp]
	mov	WORD PTR [edx], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN7@slide_hash

; 224  : #endif
; 225  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateStateCheck PROC

; 355  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateSta
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@deflateSta
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@deflateSta
$LN3@deflateSta:

; 359  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@deflateSta
$LN2@deflateSta:

; 360  :     s = strm->state;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _s$[ebp], eax

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN5@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _strm$[ebp]
	jne	SHORT $LN5@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 57			; 00000039H
	je	SHORT $LN4@deflateSta
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 69			; 00000045H
	je	SHORT $LN4@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 91			; 0000005bH
	je	SHORT $LN4@deflateSta
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 103			; 00000067H
	je	SHORT $LN4@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 113			; 00000071H
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 666			; 0000029aH
	je	SHORT $LN4@deflateSta
$LN5@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@deflateSta
$LN4@deflateSta:

; 372  :     return 0;

	xor	eax, eax
$LN1@deflateSta:

; 373  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv130 = -16						; size = 4
tv86 = -12						; size = 4
tv85 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateRes
$LN2@deflateRes:

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], 0

; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 478  :     strm->data_type = Z_UNKNOWN;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+44], 2

; 479  : 
; 480  :     s = (deflate_state *)strm->state;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _s$[ebp], eax

; 481  :     s->pending = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 482  :     s->pending_out = s->pending_buf;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx

; 483  : 
; 484  :     if (s->wrap < 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jge	SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN7@deflateRes
	mov	DWORD PTR tv86[ebp], 57			; 00000039H
	jmp	SHORT $LN8@deflateRes
$LN7@deflateRes:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN5@deflateRes
	mov	DWORD PTR tv85[ebp], 42			; 0000002aH
	jmp	SHORT $LN6@deflateRes
$LN5@deflateRes:
	mov	DWORD PTR tv85[ebp], 113		; 00000071H
$LN6@deflateRes:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR tv86[ebp], edx
$LN8@deflateRes:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [eax+4], ecx

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 2
	jne	SHORT $LN9@deflateRes
	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN10@deflateRes
$LN9@deflateRes:
	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv130[ebp], eax
$LN10@deflateRes:
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR [eax+48], ecx

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], 0

; 498  : 
; 499  :     _tr_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_init
	add	esp, 4

; 500  : 
; 501  :     return Z_OK;

	xor	eax, eax
$LN1@deflateRes:

; 502  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;

	mov	DWORD PTR _wrap$[ebp], 1

; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN3@deflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9[edx]
	cmp	eax, ecx
	jne	SHORT $LN3@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN2@deflateIni
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN1@deflateIni
$LN2@deflateIni:

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN4@deflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN4@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], 0

; 267  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _zcfree
$LN6@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN7@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN7@deflateIni:

; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN8@deflateIni

; 289  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 290  :         windowBits = -windowBits;

	mov	edx, DWORD PTR _windowBits$[ebp]
	neg	edx
	mov	DWORD PTR _windowBits$[ebp], edx

; 291  :     }

	jmp	SHORT $LN9@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN9@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

	mov	DWORD PTR _wrap$[ebp], 2

; 295  :         windowBits -= 16;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _windowBits$[ebp], eax
$LN9@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

	cmp	DWORD PTR _memLevel$[ebp], 1
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _memLevel$[ebp], 9
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	SHORT $LN12@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN11@deflateIni
	cmp	DWORD PTR _wrap$[ebp], 1
	je	SHORT $LN11@deflateIni
$LN12@deflateIni:

; 301  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN11@deflateIni:

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN13@deflateIni
	mov	DWORD PTR _windowBits$[ebp], 9
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN14@deflateIni
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateIni
$LN14@deflateIni:

; 306  :     strm->state = (struct internal_state FAR *)s;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+28], eax

; 307  :     s->strm = strm;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], edx

; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 42			; 0000002aH

; 309  : 
; 310  :     s->wrap = wrap;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 311  :     s->gzhead = Z_NULL;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], 0

; 312  :     s->w_bits = (uInt)windowBits;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 313  :     s->w_size = 1 << s->w_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+48]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+44], edx

; 314  :     s->w_mask = s->w_size - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+52], edx

; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 7
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+80], ecx

; 317  :     s->hash_size = 1 << s->hash_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+80]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+76], edx

; 318  :     s->hash_mask = s->hash_size - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], edx

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	add	eax, 2
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], eax

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+64], eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5824], 0

; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5788], eax

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 330  :     s->pending_buf = (uchf *) overlay;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+8], eax

; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5788]
	shl	edx, 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+12], edx

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN16@deflateIni
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN16@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN16@deflateIni
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN15@deflateIni
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 666			; 0000029aH

; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax

; 337  :         deflateEnd (strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_deflateEnd@4

; 338  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@deflateIni
$LN15@deflateIni:

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	shr	eax, 1
	mov	ecx, DWORD PTR _overlay$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5796], edx

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

	mov	ecx, DWORD PTR _s$[ebp]
	imul	edx, DWORD PTR [ecx+5788], 3
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 342  : 
; 343  :     s->level = level;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR [edx+132], eax

; 344  :     s->strategy = strategy;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [ecx+136], edx

; 345  :     s->method = (Byte)method;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _method$[ebp]
	mov	BYTE PTR [eax+36], cl

; 346  : 
; 347  :     return deflateReset(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflateReset@4
$LN1@deflateIni:

; 348  : }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC

; 233  : {

	push	ebp
	mov	ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateInit2_@32

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

	pop	ebp
	ret	16					; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC

; 520  : {

	push	ebp
	mov	ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@deflateSet
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+24], 2
	je	SHORT $LN2@deflateSet
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateSet
$LN2@deflateSet:

; 523  :     strm->state->gzhead = head;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 524  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 525  : }

	pop	ebp
	ret	8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_put$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC

; 546  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@deflatePri
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePri
$LN5@deflatePri:

; 551  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5796], ecx
	jae	SHORT $LN4@deflatePri

; 553  :         return Z_BUF_ERROR;

	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflatePri
$LN4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR [eax+5820]
	mov	DWORD PTR _put$[ebp], ecx

; 556  :         if (put > bits)

	mov	edx, DWORD PTR _put$[ebp]
	cmp	edx, DWORD PTR _bits$[ebp]
	jle	SHORT $LN7@deflatePri

; 557  :             put = bits;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _put$[ebp], eax
$LN7@deflatePri:

; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

	mov	edx, 1
	mov	ecx, DWORD PTR _put$[ebp]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	movzx	ecx, dx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+5816]
	or	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 559  :         s->bi_valid += put;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax

; 560  :         _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 561  :         value >>= put;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sar	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 562  :         bits -= put;

	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR _bits$[ebp], ecx

; 563  :     } while (bits);

	jne	$LN4@deflatePri

; 564  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePri:

; 565  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC

; 532  : {

	push	ebp
	mov	ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflatePen
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflatePen
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

	cmp	DWORD PTR _pending$[ebp], 0
	je	SHORT $LN3@deflatePen

; 535  :         *pending = strm->state->pending;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _pending$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx
$LN3@deflatePen:

; 536  :     if (bits != Z_NULL)

	cmp	DWORD PTR _bits$[ebp], 0
	je	SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR [eax+5820]
	mov	DWORD PTR [ecx], edx
$LN4@deflatePen:

; 538  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePen:

; 539  : }

	pop	ebp
	ret	12					; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv138 = -32						; size = 4
tv130 = -28						; size = 4
_complen$ = -24						; size = 4
tv80 = -20						; size = 4
tv77 = -16						; size = 4
_str$1 = -12						; size = 4
_s$ = -8						; size = 4
_wraplen$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC

; 655  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +

	mov	eax, DWORD PTR _sourceLen$[ebp]
	add	eax, 7
	shr	eax, 3
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	add	ecx, 63					; 0000003fH
	shr	ecx, 6
	lea	edx, DWORD PTR [eax+ecx+5]
	mov	DWORD PTR _complen$[ebp], edx

; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@deflateBou

; 665  :         return complen + 6;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, 6
	jmp	$LN1@deflateBou
$LN10@deflateBou:

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 669  :     switch (s->wrap) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN11@deflateBou
	cmp	DWORD PTR tv77[ebp], 1
	je	SHORT $LN12@deflateBou
	cmp	DWORD PTR tv77[ebp], 2
	je	SHORT $LN13@deflateBou
	jmp	$LN19@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

	mov	DWORD PTR _wraplen$[ebp], 0

; 672  :         break;

	jmp	$LN2@deflateBou
$LN12@deflateBou:

; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN23@deflateBou
	mov	DWORD PTR tv80[ebp], 4
	jmp	SHORT $LN24@deflateBou
$LN23@deflateBou:
	mov	DWORD PTR tv80[ebp], 0
$LN24@deflateBou:
	mov	eax, DWORD PTR tv80[ebp]
	add	eax, 6
	mov	DWORD PTR _wraplen$[ebp], eax

; 675  :         break;

	jmp	$LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;

	mov	DWORD PTR _wraplen$[ebp], 18		; 00000012H

; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN14@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _wraplen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _wraplen$[ebp], edx
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _str$1[ebp], edx

; 684  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$1[ebp], 0
	je	SHORT $LN16@deflateBou
$LN6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 1
	mov	DWORD PTR _wraplen$[ebp], eax

; 687  :                 } while (*str++);

	mov	ecx, DWORD PTR _str$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv130[ebp], edx
	mov	eax, DWORD PTR _str$1[ebp]
	add	eax, 1
	mov	DWORD PTR _str$1[ebp], eax
	cmp	DWORD PTR tv130[ebp], 0
	jne	SHORT $LN6@deflateBou
$LN16@deflateBou:

; 688  :             str = s->gzhead->comment;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _str$1[ebp], eax

; 689  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$1[ebp], 0
	je	SHORT $LN17@deflateBou
$LN9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;

	mov	ecx, DWORD PTR _wraplen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _wraplen$[ebp], ecx

; 692  :                 } while (*str++);

	mov	edx, DWORD PTR _str$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR _str$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$1[ebp], ecx
	cmp	DWORD PTR tv138[ebp], 0
	jne	SHORT $LN9@deflateBou
$LN17@deflateBou:

; 693  :             if (s->gzhead->hcrc)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN14@deflateBou

; 694  :                 wraplen += 2;

	mov	ecx, DWORD PTR _wraplen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _wraplen$[ebp], ecx
$LN14@deflateBou:

; 695  :         }
; 696  :         break;

	jmp	SHORT $LN2@deflateBou
$LN19@deflateBou:

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

	mov	DWORD PTR _wraplen$[ebp], 6
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+48], 15			; 0000000fH
	jne	SHORT $LN21@deflateBou
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+80], 15			; 0000000fH
	je	SHORT $LN20@deflateBou
$LN21@deflateBou:

; 704  :         return complen + wraplen;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, DWORD PTR _wraplen$[ebp]
	jmp	SHORT $LN1@deflateBou
$LN20@deflateBou:

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _sourceLen$[ebp]
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 14					; 0000000eH
	add	ecx, edx
	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 25					; 00000019H
	add	ecx, DWORD PTR _wraplen$[ebp]
	lea	eax, DWORD PTR [eax+ecx+7]
$LN1@deflateBou:

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC

; 623  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateTun
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateTun
$LN2@deflateTun:

; 627  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 628  :     s->good_match = (uInt)good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _good_length$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 629  :     s->max_lazy_match = (uInt)max_lazy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [edx+128], eax

; 630  :     s->nice_match = nice_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [ecx+144], edx

; 631  :     s->max_chain_length = (uInt)max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+124], ecx

; 632  :     return Z_OK;

	xor	eax, eax
$LN1@deflateTun:

; 633  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_func$ = -12						; size = 4
_err$1 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC

; 572  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflatePar
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN2@deflatePar:

; 577  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN3@deflatePar
	mov	DWORD PTR _level$[ebp], 6
$LN3@deflatePar:

; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN5@deflatePar
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN5@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN5@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN4@deflatePar
$LN5@deflatePar:

; 585  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN4@deflatePar:

; 586  :     }
; 587  :     func = configuration_table[s->level].func;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	mov	DWORD PTR _func$[ebp], edx

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN7@deflatePar
	imul	edx, DWORD PTR _level$[ebp], 12
	mov	eax, DWORD PTR _func$[ebp]
	cmp	eax, DWORD PTR _configuration_table[edx+8]
	je	SHORT $LN6@deflatePar
$LN7@deflatePar:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5824], 0
	je	SHORT $LN6@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

	push	5
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflate@8
	mov	DWORD PTR _err$1[ebp], eax

; 593  :         if (err == Z_STREAM_ERROR)

	cmp	DWORD PTR _err$1[ebp], -2		; fffffffeH
	jne	SHORT $LN8@deflatePar

; 594  :             return err;

	mov	eax, DWORD PTR _err$1[ebp]
	jmp	$LN1@deflatePar
$LN8@deflatePar:

; 595  :         if (strm->avail_out == 0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@deflatePar

; 596  :             return Z_BUF_ERROR;

	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflatePar
$LN6@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	cmp	edx, DWORD PTR _level$[ebp]
	je	$LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 0
	jne	SHORT $LN11@deflatePar
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5808], 0
	je	SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5808], 1
	jne	SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_slide_hash
	add	esp, 4
	jmp	SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	xor	eax, eax
	mov	WORD PTR [ecx+edx*2-2], ax
$LN13@deflatePar:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	lea	eax, DWORD PTR [edx+edx-2]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 604  :             s->matches = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [ecx+132], edx

; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 608  :         s->good_match       = configuration_table[level].good_length;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+140], ecx

; 609  :         s->nice_match       = configuration_table[level].nice_length;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+144], ecx

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+6]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+124], ecx
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 613  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePar:

; 614  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC

; 507  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateResetKeep@4
	mov	DWORD PTR _ret$[ebp], eax

; 511  :     if (ret == Z_OK)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_lm_init
	add	esp, 4
$LN2@deflateRes:

; 513  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 514  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC

; 1105 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@deflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN2@deflateCop
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateCop
$LN2@deflateCop:

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _ss$[ebp], edx

; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ds$[ebp], eax

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _ds$[ebp], 0
	jne	SHORT $LN4@deflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN4@deflateCop:

; 1124 :     dest->state = (struct internal_state FAR *) ds;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

	push	5828					; 000016c4H
	mov	edx, DWORD PTR _ss$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1126 :     ds->strm = dest;

	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx], edx

; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+64], eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 1132 :     ds->pending_buf = (uchf *) overlay;

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

	mov	ecx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN6@deflateCop
	mov	edx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN6@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN6@deflateCop
	mov	ecx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN5@deflateCop
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_deflateEnd@4

; 1137 :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN5@deflateCop:

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	shr	eax, 1
	mov	ecx, DWORD PTR _overlay$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+5796], edx

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

	mov	ecx, DWORD PTR _ds$[ebp]
	imul	edx, DWORD PTR [ecx+5788], 3
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

	mov	edx, DWORD PTR _ds$[ebp]
	add	edx, 148				; 00000094H
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+2840], edx

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

	mov	ecx, DWORD PTR _ds$[ebp]
	add	ecx, 2440				; 00000988H
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+2852], ecx

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

	xor	eax, eax
$LN1@deflateCop:

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateGet
$LN2@deflateGet:

; 455  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 456  :     len = s->strstart + s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	DWORD PTR _len$[ebp], ecx

; 457  :     if (len > s->w_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN3@deflateGet

; 458  :         len = s->w_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _len$[ebp], eax
$LN3@deflateGet:

; 459  :     if (dictionary != Z_NULL && len)

	cmp	DWORD PTR _dictionary$[ebp], 0
	je	SHORT $LN4@deflateGet
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+116]
	sub	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	eax, DWORD PTR _dictionary$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

	cmp	DWORD PTR _dictLength$[ebp], 0
	je	SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

	mov	ecx, DWORD PTR _dictLength$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@deflateGet:

; 463  :     return Z_OK;

	xor	eax, eax
$LN1@deflateGet:

; 464  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_avail$ = -24						; size = 4
_next$ = -20						; size = 4
_n$ = -16						; size = 4
_wrap$ = -12						; size = 4
_str$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@deflateSet
	cmp	DWORD PTR _dictionary$[ebp], 0
	jne	SHORT $LN7@deflateSet
$LN8@deflateSet:

; 388  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateSet
$LN7@deflateSet:

; 389  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 390  :     wrap = s->wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _wrap$[ebp], ecx

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

	cmp	DWORD PTR _wrap$[ebp], 2
	je	SHORT $LN10@deflateSet
	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN11@deflateSet
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 42			; 0000002aH
	jne	SHORT $LN10@deflateSet
$LN11@deflateSet:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN9@deflateSet
$LN10@deflateSet:

; 392  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateSet
$LN9@deflateSet:

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

	mov	ecx, DWORD PTR _dictLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dictionary$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _dictLength$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN13@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

	cmp	DWORD PTR _wrap$[ebp], 0
	jne	SHORT $LN14@deflateSet

; 402  :             CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 403  :             s->strstart = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], 0

; 404  :             s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0

; 405  :             s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0
$LN14@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _dictLength$[ebp]
	sub	eax, DWORD PTR [edx+44]
	add	eax, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _dictionary$[ebp], eax

; 408  :         dictLength = s->w_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _dictLength$[ebp], edx
$LN13@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _avail$[ebp], ecx

; 413  :     next = strm->next_in;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$[ebp], eax

; 414  :     strm->avail_in = dictLength;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _dictLength$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 415  :     strm->next_in = (z_const Bytef *)dictionary;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR [eax], ecx

; 416  :     fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4
$LN2@deflateSet:

; 417  :     while (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN3@deflateSet

; 418  :         str = s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _str$[ebp], edx

; 419  :         n = s->lookahead - (MIN_MATCH-1);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 2
	mov	DWORD PTR _n$[ebp], ecx
$LN6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	dx, WORD PTR _str$[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 426  :             str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 427  :         } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN6@deflateSet

; 428  :         s->strstart = str;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx+108], eax

; 429  :         s->lookahead = MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 2

; 430  :         fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4

; 431  :     }

	jmp	$LN2@deflateSet
$LN3@deflateSet:

; 432  :     s->strstart += s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 433  :     s->block_start = (long)s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax

; 434  :     s->insert = s->lookahead;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	DWORD PTR [ecx+5812], eax

; 435  :     s->lookahead = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 437  :     s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 438  :     strm->next_in = next;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax

; 439  :     strm->avail_in = avail;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _avail$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 440  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 441  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 442  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
_status$ = -8						; size = 4
tv144 = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC

; 1078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateEnd
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateEnd
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _status$[ebp], eax

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN3@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN4@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN5@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN6@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 1092 :     strm->state = Z_NULL;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	jne	SHORT $LN8@deflateEnd
	mov	DWORD PTR tv144[ebp], -3		; fffffffdH
	jmp	SHORT $LN9@deflateEnd
$LN8@deflateEnd:
	mov	DWORD PTR tv144[ebp], 0
$LN9@deflateEnd:
	mov	eax, DWORD PTR tv144[ebp]
$LN1@deflateEnd:

; 1095 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\swerve\libs\zlib1211\zlib-1.2.11\deflate.c
_TEXT	SEGMENT
tv865 = -108						; size = 4
tv719 = -104						; size = 4
tv718 = -100						; size = 4
tv717 = -96						; size = 4
_val$1 = -92						; size = 4
_val$2 = -88						; size = 4
tv380 = -84						; size = 4
tv379 = -80						; size = 4
tv316 = -76						; size = 4
tv311 = -72						; size = 4
tv306 = -68						; size = 4
tv301 = -64						; size = 4
tv297 = -60						; size = 4
tv273 = -56						; size = 4
tv272 = -52						; size = 4
tv135 = -48						; size = 4
_old_flush$ = -44					; size = 4
tv131 = -40						; size = 4
_copy$3 = -36						; size = 4
_level_flags$4 = -32					; size = 4
_bstate$5 = -28						; size = 4
_left$6 = -24						; size = 4
_beg$7 = -20						; size = 4
_beg$8 = -16						; size = 4
_beg$9 = -12						; size = 4
_header$10 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN29@deflate
	cmp	DWORD PTR _flush$[ebp], 5
	jg	SHORT $LN29@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	jge	SHORT $LN28@deflate
$LN29@deflate:

; 771  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN28@deflate:

; 772  :     }
; 773  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN31@deflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN32@deflate
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN31@deflate
$LN32@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN30@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN30@deflate
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN33@deflate
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN33@deflate:

; 781  : 
; 782  :     old_flush = s->last_flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _old_flush$[ebp], ecx

; 783  :     s->last_flush = flush;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [edx+40], eax

; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN34@deflate

; 787  :         flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 788  :         if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN36@deflate

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 796  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN36@deflate:

; 797  :         }

	jmp	SHORT $LN35@deflate
$LN34@deflate:

; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN35@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	jle	SHORT $LN98@deflate
	mov	DWORD PTR tv131[ebp], 9
	jmp	SHORT $LN99@deflate
$LN98@deflate:
	mov	DWORD PTR tv131[ebp], 0
$LN99@deflate:
	cmp	DWORD PTR _old_flush$[ebp], 4
	jle	SHORT $LN100@deflate
	mov	DWORD PTR tv135[ebp], 9
	jmp	SHORT $LN101@deflate
$LN100@deflate:
	mov	DWORD PTR tv135[ebp], 0
$LN101@deflate:
	mov	eax, DWORD PTR _flush$[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR _old_flush$[ebp]
	shl	ecx, 1
	sub	ecx, DWORD PTR tv135[ebp]
	cmp	eax, ecx
	jg	SHORT $LN35@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN35@deflate

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN35@deflate:

; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN38@deflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN38@deflate

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	$LN39@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 8
	shl	edx, 4
	add	edx, 8
	shl	edx, 8
	mov	DWORD PTR _header$10[ebp], edx

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN42@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 2
	jge	SHORT $LN40@deflate
$LN42@deflate:

; 820  :             level_flags = 0;

	mov	DWORD PTR _level_flags$4[ebp], 0
	jmp	SHORT $LN41@deflate
$LN40@deflate:

; 821  :         else if (s->level < 6)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 6
	jge	SHORT $LN43@deflate

; 822  :             level_flags = 1;

	mov	DWORD PTR _level_flags$4[ebp], 1
	jmp	SHORT $LN41@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jne	SHORT $LN45@deflate

; 824  :             level_flags = 2;

	mov	DWORD PTR _level_flags$4[ebp], 2
	jmp	SHORT $LN41@deflate
$LN45@deflate:

; 825  :         else
; 826  :             level_flags = 3;

	mov	DWORD PTR _level_flags$4[ebp], 3
$LN41@deflate:

; 827  :         header |= (level_flags << 6);

	mov	ecx, DWORD PTR _level_flags$4[ebp]
	shl	ecx, 6
	or	ecx, DWORD PTR _header$10[ebp]
	mov	DWORD PTR _header$10[ebp], ecx

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN47@deflate
	mov	eax, DWORD PTR _header$10[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _header$10[ebp], eax
$LN47@deflate:

; 829  :         header += 31 - (header % 31);

	mov	eax, DWORD PTR _header$10[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	eax, 31					; 0000001fH
	sub	eax, edx
	add	eax, DWORD PTR _header$10[ebp]
	mov	DWORD PTR _header$10[ebp], eax

; 830  : 
; 831  :         putShortMSB(s, header);

	mov	ecx, DWORD PTR _header$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN48@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	and	edx, 65535				; 0000ffffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8
$LN48@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 839  :         s->status = BUSY_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 113			; 00000071H

; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 843  :         if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN39@deflate

; 844  :             s->last_flush = -1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 845  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN39@deflate:

; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 57			; 00000039H
	jne	$LN50@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 852  :         put_byte(s, 31);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 31			; 0000001fH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 853  :         put_byte(s, 139);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 139			; 0000008bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 854  :         put_byte(s, 8);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 855  :         if (s->gzhead == Z_NULL) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	$LN51@deflate

; 856  :             put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 857  :             put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 858  :             put_byte(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 859  :             put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 860  :             put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 861  :             put_byte(s, s->level == 9 ? 2 :

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 9
	jne	SHORT $LN104@deflate
	mov	DWORD PTR tv273[ebp], 2
	jmp	SHORT $LN105@deflate
$LN104@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN102@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 2
	jl	SHORT $LN102@deflate
	mov	DWORD PTR tv272[ebp], 0
	jmp	SHORT $LN103@deflate
$LN102@deflate:
	mov	DWORD PTR tv272[ebp], 4
$LN103@deflate:
	mov	edx, DWORD PTR tv272[ebp]
	mov	DWORD PTR tv273[ebp], edx
$LN105@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR tv273[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 10			; 0000000aH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 865  :             s->status = BUSY_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 113			; 00000071H

; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 869  :             if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN53@deflate

; 870  :                 s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 871  :                 return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN53@deflate:

; 872  :             }
; 873  :         }

	jmp	$LN50@deflate
$LN51@deflate:

; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN106@deflate
	mov	DWORD PTR tv297[ebp], 1
	jmp	SHORT $LN107@deflate
$LN106@deflate:
	mov	DWORD PTR tv297[ebp], 0
$LN107@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN108@deflate
	mov	DWORD PTR tv301[ebp], 2
	jmp	SHORT $LN109@deflate
$LN108@deflate:
	mov	DWORD PTR tv301[ebp], 0
$LN109@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN110@deflate
	mov	DWORD PTR tv306[ebp], 0
	jmp	SHORT $LN111@deflate
$LN110@deflate:
	mov	DWORD PTR tv306[ebp], 4
$LN111@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN112@deflate
	mov	DWORD PTR tv311[ebp], 0
	jmp	SHORT $LN113@deflate
$LN112@deflate:
	mov	DWORD PTR tv311[ebp], 8
$LN113@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN114@deflate
	mov	DWORD PTR tv316[ebp], 0
	jmp	SHORT $LN115@deflate
$LN114@deflate:
	mov	DWORD PTR tv316[ebp], 16		; 00000010H
$LN115@deflate:
	mov	eax, DWORD PTR tv297[ebp]
	add	eax, DWORD PTR tv301[ebp]
	add	eax, DWORD PTR tv306[ebp]
	add	eax, DWORD PTR tv311[ebp]
	add	eax, DWORD PTR tv316[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 885  :             put_byte(s, s->level == 9 ? 2 :

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN118@deflate
	mov	DWORD PTR tv380[ebp], 2
	jmp	SHORT $LN119@deflate
$LN118@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN116@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN116@deflate
	mov	DWORD PTR tv379[ebp], 0
	jmp	SHORT $LN117@deflate
$LN116@deflate:
	mov	DWORD PTR tv379[ebp], 4
$LN117@deflate:
	mov	eax, DWORD PTR tv379[ebp]
	mov	DWORD PTR tv380[ebp], eax
$LN119@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR tv380[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 889  :             if (s->gzhead->extra != Z_NULL) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 897  :             s->status = EXTRA_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 69			; 00000045H
$LN50@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 69			; 00000045H
	jne	$LN56@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	$LN57@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _beg$9[ebp], eax

; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _left$6[ebp], eax
$LN2@deflate:

; 904  :             while (s->pending + left > s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _left$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jbe	$LN3@deflate

; 905  :                 uInt copy = s->pending_buf_size - s->pending;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _copy$3[ebp], ecx

; 906  :                 zmemcpy(s->pending_buf + s->pending,

	mov	edx, DWORD PTR _copy$3[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+20]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+20], eax
$LN6@deflate:

; 909  :                 HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN4@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$9[ebp]
	jbe	SHORT $LN4@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$9[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN4@deflate:
	xor	eax, eax
	jne	SHORT $LN6@deflate

; 910  :                 s->gzindex += copy;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _copy$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], edx

; 911  :                 flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 912  :                 if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN59@deflate

; 913  :                     s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 914  :                     return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN59@deflate:

; 915  :                 }
; 916  :                 beg = 0;

	mov	DWORD PTR _beg$9[ebp], 0

; 917  :                 left -= copy;

	mov	ecx, DWORD PTR _left$6[ebp]
	sub	ecx, DWORD PTR _copy$3[ebp]
	mov	DWORD PTR _left$6[ebp], ecx

; 918  :             }

	jmp	$LN2@deflate
$LN3@deflate:

; 919  :             zmemcpy(s->pending_buf + s->pending,

	mov	edx, DWORD PTR _left$6[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+20]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _left$6[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN9@deflate:

; 922  :             HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN7@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$9[ebp]
	jbe	SHORT $LN7@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$9[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN7@deflate:
	xor	eax, eax
	jne	SHORT $LN9@deflate

; 923  :             s->gzindex = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+32], 0
$LN57@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 73			; 00000049H
$LN56@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	jne	$LN61@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+28], 0
	je	$LN62@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$8[ebp], ecx
$LN12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN63@deflate
$LN15@deflate:

; 933  :                     HCRC_UPDATE(beg);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN13@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _beg$8[ebp]
	jbe	SHORT $LN13@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN13@deflate:
	xor	edx, edx
	jne	SHORT $LN15@deflate

; 934  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 935  :                     if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN65@deflate

; 936  :                         s->last_flush = -1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 937  :                         return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN65@deflate:

; 938  :                     }
; 939  :                     beg = 0;

	mov	DWORD PTR _beg$8[ebp], 0
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+28]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _val$2[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 942  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _val$2[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 943  :             } while (val != 0);

	cmp	DWORD PTR _val$2[ebp], 0
	jne	$LN12@deflate
$LN18@deflate:

; 944  :             HCRC_UPDATE(beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN16@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _beg$8[ebp]
	jbe	SHORT $LN16@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _beg$8[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _beg$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN16@deflate:
	xor	edx, edx
	jne	SHORT $LN18@deflate

; 945  :             s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN62@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 91			; 0000005bH
$LN61@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 91			; 0000005bH
	jne	$LN67@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN68@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _beg$7[ebp], eax
$LN21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN69@deflate
$LN24@deflate:

; 955  :                     HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN22@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN22@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN22@deflate:
	xor	eax, eax
	jne	SHORT $LN24@deflate

; 956  :                     flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 957  :                     if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN71@deflate

; 958  :                         s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 959  :                         return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN71@deflate:

; 960  :                     }
; 961  :                     beg = 0;

	mov	DWORD PTR _beg$7[ebp], 0
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+36]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _val$1[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], edx

; 964  :                 put_byte(s, val);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR _val$1[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 965  :             } while (val != 0);

	cmp	DWORD PTR _val$1[ebp], 0
	jne	$LN21@deflate
$LN27@deflate:

; 966  :             HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN25@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN25@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN25@deflate:
	xor	eax, eax
	jne	SHORT $LN27@deflate
$LN68@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 103			; 00000067H
$LN67@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 103			; 00000067H
	jne	$LN73@deflate

; 971  :         if (s->gzhead->hcrc) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 2
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jbe	SHORT $LN75@deflate

; 973  :                 flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 974  :                 if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN75@deflate

; 975  :                     s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 976  :                     return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN75@deflate:

; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 987  :         if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN73@deflate

; 988  :             s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 989  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN73@deflate:

; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN79@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN79@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN78@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	je	$LN78@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jne	SHORT $LN124@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_stored
	add	esp, 8
	mov	DWORD PTR tv719[ebp], eax
	jmp	SHORT $LN125@deflate
$LN124@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jne	SHORT $LN122@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_huff
	add	esp, 8
	mov	DWORD PTR tv718[ebp], eax
	jmp	SHORT $LN123@deflate
$LN122@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 3
	jne	SHORT $LN120@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_rle
	add	esp, 8
	mov	DWORD PTR tv717[ebp], eax
	jmp	SHORT $LN121@deflate
$LN120@deflate:
	mov	ecx, DWORD PTR _flush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	call	edx
	add	esp, 8
	mov	DWORD PTR tv717[ebp], eax
$LN121@deflate:
	mov	eax, DWORD PTR tv717[ebp]
	mov	DWORD PTR tv718[ebp], eax
$LN123@deflate:
	mov	ecx, DWORD PTR tv718[ebp]
	mov	DWORD PTR tv719[ebp], ecx
$LN125@deflate:
	mov	edx, DWORD PTR tv719[ebp]
	mov	DWORD PTR _bstate$5[ebp], edx

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

	cmp	DWORD PTR _bstate$5[ebp], 2
	je	SHORT $LN81@deflate
	cmp	DWORD PTR _bstate$5[ebp], 3
	jne	SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

	cmp	DWORD PTR _bstate$5[ebp], 0
	je	SHORT $LN83@deflate
	cmp	DWORD PTR _bstate$5[ebp], 2
	jne	SHORT $LN82@deflate
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN84@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1
$LN84@deflate:

; 1011 :             }
; 1012 :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN82@deflate:

; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

	cmp	DWORD PTR _bstate$5[ebp], 1
	jne	$LN78@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 1
	jne	SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_align
	add	esp, 4
	jmp	SHORT $LN87@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN87@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN87@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	xor	ecx, ecx
	mov	WORD PTR [edx+eax*2-2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	lea	ecx, DWORD PTR [eax+eax-2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN87@deflate

; 1032 :                         s->strstart = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], 0

; 1033 :                         s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0

; 1034 :                         s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0
$LN87@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 1039 :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN78@deflate

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 1041 :               return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN78@deflate:

; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN92@deflate
	xor	eax, eax
	jmp	$LN1@deflate
$LN92@deflate:

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jg	SHORT $LN93@deflate
	mov	eax, 1
	jmp	$LN1@deflate
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	$LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1060 :     }

	jmp	SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	and	edx, 65535				; 0000ffffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jle	SHORT $LN96@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN96@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN126@deflate
	mov	DWORD PTR tv865[ebp], 0
	jmp	SHORT $LN127@deflate
$LN126@deflate:
	mov	DWORD PTR tv865[ebp], 1
$LN127@deflate:
	mov	eax, DWORD PTR tv865[ebp]
$LN1@deflate:

; 1073 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflate@8 ENDP
_TEXT	ENDS
END
